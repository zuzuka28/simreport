// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"context"
	"encoding/json"
	"fmt"
	"mime/multipart"
	"net/http"
	"time"

	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// CompareAllResult defines model for CompareAllResult.
type CompareAllResult struct {
	Comparisons *[]struct {
		OtherFileId *string `json:"other_file_id,omitempty"`

		// Similarity Процент сходства с другим файлом
		Similarity *float32 `json:"similarity,omitempty"`
	} `json:"comparisons,omitempty"`

	// FileId Идентификатор исходного файла
	FileId *string `json:"file_id,omitempty"`
}

// CompareRequest defines model for CompareRequest.
type CompareRequest struct {
	// FileIds Список идентификаторов файлов для сравнения
	FileIds *[]string `json:"file_ids,omitempty"`
}

// ComparisonResult defines model for ComparisonResult.
type ComparisonResult struct {
	Details *[]struct {
		File1Id *string `json:"file1_id,omitempty"`
		File2Id *string `json:"file2_id,omitempty"`

		// Similarity Процент сходства между парой файлов
		Similarity *float32 `json:"similarity,omitempty"`
	} `json:"details,omitempty"`

	// SimilarityScore Процент сходства между файлами (от 0 до 100)
	SimilarityScore *float32 `json:"similarity_score,omitempty"`
}

// FileInfo defines model for FileInfo.
type FileInfo struct {
	FileId   *string `json:"file_id,omitempty"`
	Filename *string `json:"filename,omitempty"`

	// Size Размер файла в байтах
	Size       *int       `json:"size,omitempty"`
	UploadDate *time.Time `json:"upload_date,omitempty"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	// Files Список файлов для загрузки
	Files *[]openapi_types.File `json:"files,omitempty"`
}

// UploadSuccess defines model for UploadSuccess.
type UploadSuccess struct {
	// FileIds Список уникальных идентификаторов загруженных файлов
	FileIds *[]string `json:"file_ids,omitempty"`
}

// FileId defines model for FileId.
type FileId = string

// BadRequest defines model for BadRequest.
type BadRequest struct {
	Error *string `json:"error,omitempty"`
}

// FileNotFound defines model for FileNotFound.
type FileNotFound struct {
	Error *string `json:"error,omitempty"`
}

// PostFilesCompareJSONRequestBody defines body for PostFilesCompare for application/json ContentType.
type PostFilesCompareJSONRequestBody = CompareRequest

// PostFilesUploadMultipartRequestBody defines body for PostFilesUpload for multipart/form-data ContentType.
type PostFilesUploadMultipartRequestBody = UploadRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Сравнение файлов на сходство
	// (POST /files/compare)
	PostFilesCompare(w http.ResponseWriter, r *http.Request)
	// Загрузка файлов для анализа
	// (POST /files/upload)
	PostFilesUpload(w http.ResponseWriter, r *http.Request)
	// Получение информации о загруженном файле
	// (GET /files/{file_id})
	GetFilesFileId(w http.ResponseWriter, r *http.Request, fileId FileId)
	// Сравнение файла со всеми загруженными файлами
	// (GET /files/{file_id}/compare-all)
	GetFilesFileIdCompareAll(w http.ResponseWriter, r *http.Request, fileId FileId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostFilesCompare operation middleware
func (siw *ServerInterfaceWrapper) PostFilesCompare(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostFilesCompare(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostFilesUpload operation middleware
func (siw *ServerInterfaceWrapper) PostFilesUpload(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostFilesUpload(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetFilesFileId operation middleware
func (siw *ServerInterfaceWrapper) GetFilesFileId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "file_id" -------------
	var fileId FileId

	err = runtime.BindStyledParameterWithOptions("simple", "file_id", mux.Vars(r)["file_id"], &fileId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "file_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFilesFileId(w, r, fileId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetFilesFileIdCompareAll operation middleware
func (siw *ServerInterfaceWrapper) GetFilesFileIdCompareAll(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "file_id" -------------
	var fileId FileId

	err = runtime.BindStyledParameterWithOptions("simple", "file_id", mux.Vars(r)["file_id"], &fileId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "file_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFilesFileIdCompareAll(w, r, fileId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/files/compare", wrapper.PostFilesCompare).Methods("POST")

	r.HandleFunc(options.BaseURL+"/files/upload", wrapper.PostFilesUpload).Methods("POST")

	r.HandleFunc(options.BaseURL+"/files/{file_id}", wrapper.GetFilesFileId).Methods("GET")

	r.HandleFunc(options.BaseURL+"/files/{file_id}/compare-all", wrapper.GetFilesFileIdCompareAll).Methods("GET")

	return r
}

type BadRequestJSONResponse struct {
	Error *string `json:"error,omitempty"`
}

type CompareAllResultJSONResponse CompareAllResult

type ComparisonResultJSONResponse ComparisonResult

type FileInfoJSONResponse FileInfo

type FileNotFoundJSONResponse struct {
	Error *string `json:"error,omitempty"`
}

type UploadSuccessJSONResponse UploadSuccess

type PostFilesCompareRequestObject struct {
	Body *PostFilesCompareJSONRequestBody
}

type PostFilesCompareResponseObject interface {
	VisitPostFilesCompareResponse(w http.ResponseWriter) error
}

type PostFilesCompare200JSONResponse struct{ ComparisonResultJSONResponse }

func (response PostFilesCompare200JSONResponse) VisitPostFilesCompareResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostFilesCompare400JSONResponse struct{ BadRequestJSONResponse }

func (response PostFilesCompare400JSONResponse) VisitPostFilesCompareResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostFilesUploadRequestObject struct {
	Body *multipart.Reader
}

type PostFilesUploadResponseObject interface {
	VisitPostFilesUploadResponse(w http.ResponseWriter) error
}

type PostFilesUpload200JSONResponse struct{ UploadSuccessJSONResponse }

func (response PostFilesUpload200JSONResponse) VisitPostFilesUploadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostFilesUpload400JSONResponse struct{ BadRequestJSONResponse }

func (response PostFilesUpload400JSONResponse) VisitPostFilesUploadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetFilesFileIdRequestObject struct {
	FileId FileId `json:"file_id"`
}

type GetFilesFileIdResponseObject interface {
	VisitGetFilesFileIdResponse(w http.ResponseWriter) error
}

type GetFilesFileId200JSONResponse struct{ FileInfoJSONResponse }

func (response GetFilesFileId200JSONResponse) VisitGetFilesFileIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetFilesFileId404JSONResponse struct{ FileNotFoundJSONResponse }

func (response GetFilesFileId404JSONResponse) VisitGetFilesFileIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetFilesFileIdCompareAllRequestObject struct {
	FileId FileId `json:"file_id"`
}

type GetFilesFileIdCompareAllResponseObject interface {
	VisitGetFilesFileIdCompareAllResponse(w http.ResponseWriter) error
}

type GetFilesFileIdCompareAll200JSONResponse struct{ CompareAllResultJSONResponse }

func (response GetFilesFileIdCompareAll200JSONResponse) VisitGetFilesFileIdCompareAllResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetFilesFileIdCompareAll404JSONResponse struct{ FileNotFoundJSONResponse }

func (response GetFilesFileIdCompareAll404JSONResponse) VisitGetFilesFileIdCompareAllResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Сравнение файлов на сходство
	// (POST /files/compare)
	PostFilesCompare(ctx context.Context, request PostFilesCompareRequestObject) (PostFilesCompareResponseObject, error)
	// Загрузка файлов для анализа
	// (POST /files/upload)
	PostFilesUpload(ctx context.Context, request PostFilesUploadRequestObject) (PostFilesUploadResponseObject, error)
	// Получение информации о загруженном файле
	// (GET /files/{file_id})
	GetFilesFileId(ctx context.Context, request GetFilesFileIdRequestObject) (GetFilesFileIdResponseObject, error)
	// Сравнение файла со всеми загруженными файлами
	// (GET /files/{file_id}/compare-all)
	GetFilesFileIdCompareAll(ctx context.Context, request GetFilesFileIdCompareAllRequestObject) (GetFilesFileIdCompareAllResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// PostFilesCompare operation middleware
func (sh *strictHandler) PostFilesCompare(w http.ResponseWriter, r *http.Request) {
	var request PostFilesCompareRequestObject

	var body PostFilesCompareJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostFilesCompare(ctx, request.(PostFilesCompareRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostFilesCompare")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostFilesCompareResponseObject); ok {
		if err := validResponse.VisitPostFilesCompareResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostFilesUpload operation middleware
func (sh *strictHandler) PostFilesUpload(w http.ResponseWriter, r *http.Request) {
	var request PostFilesUploadRequestObject

	if reader, err := r.MultipartReader(); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode multipart body: %w", err))
		return
	} else {
		request.Body = reader
	}

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostFilesUpload(ctx, request.(PostFilesUploadRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostFilesUpload")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostFilesUploadResponseObject); ok {
		if err := validResponse.VisitPostFilesUploadResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetFilesFileId operation middleware
func (sh *strictHandler) GetFilesFileId(w http.ResponseWriter, r *http.Request, fileId FileId) {
	var request GetFilesFileIdRequestObject

	request.FileId = fileId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetFilesFileId(ctx, request.(GetFilesFileIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFilesFileId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetFilesFileIdResponseObject); ok {
		if err := validResponse.VisitGetFilesFileIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetFilesFileIdCompareAll operation middleware
func (sh *strictHandler) GetFilesFileIdCompareAll(w http.ResponseWriter, r *http.Request, fileId FileId) {
	var request GetFilesFileIdCompareAllRequestObject

	request.FileId = fileId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetFilesFileIdCompareAll(ctx, request.(GetFilesFileIdCompareAllRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFilesFileIdCompareAll")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetFilesFileIdCompareAllResponseObject); ok {
		if err := validResponse.VisitGetFilesFileIdCompareAllResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
