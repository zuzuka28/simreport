// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package provider

import (
	"context"
	"fmt"
	"github.com/elastic/go-elasticsearch/v8"
	"github.com/minio/minio-go/v7"
	"github.com/nats-io/nats.go"
	"github.com/nats-io/nats.go/jetstream"
	"io"
	"net/http"
	"os"
	document4 "simrep/api/nats/handler/document"
	server2 "simrep/api/nats/server"
	"simrep/api/rest/server"
	analyze2 "simrep/api/rest/server/handler/analyze"
	anysave3 "simrep/api/rest/server/handler/anysave"
	document3 "simrep/api/rest/server/handler/document"
	"simrep/internal/config"
	"simrep/internal/model"
	"simrep/internal/repository/anysave"
	document2 "simrep/internal/repository/document"
	"simrep/internal/repository/documentstatus"
	"simrep/internal/repository/fulltextindexclient"
	"simrep/internal/repository/shingleindexclient"
	"simrep/internal/service/analyze"
	anysave2 "simrep/internal/service/anysave"
	"simrep/internal/service/document"
	"simrep/internal/service/documentparser"
	"simrep/internal/service/documentpipeline"
	"simrep/internal/service/documentpipeline/handler/filesaved"
	documentstatus2 "simrep/internal/service/documentstatus"
	"simrep/internal/service/fulltextindex"
	"simrep/internal/service/shingleindex"
	"simrep/pkg/elasticutil"
	"simrep/pkg/minioutil"
	"simrep/pkg/tikaclient"
)

// Injectors from wire.go:

func InitConfig(path string) (*config.Config, error) {
	configConfig, err := config.New(path)
	if err != nil {
		return nil, err
	}
	return configConfig, nil
}

func InitElastic(contextContext context.Context, configConfig *config.Config) (*elasticsearch.Client, error) {
	elasticutilConfig := configConfig.Elastic
	client, err := elasticutil.NewClientWithStartup(contextContext, elasticutilConfig)
	if err != nil {
		return nil, err
	}
	return client, nil
}

func InitNats(contextContext context.Context, configConfig *config.Config) (*nats.Conn, error) {
	string2 := configConfig.Nats
	v := _wireValue
	conn, err := nats.Connect(string2, v...)
	if err != nil {
		return nil, err
	}
	return conn, nil
}

var (
	_wireValue = []nats.Option(nil)
)

func InitTika(contextContext context.Context, configConfig *config.Config) (*tikaclient.Client, error) {
	client := _wireClientValue
	string2 := configConfig.Tika
	tikaclientClient := tikaclient.New(client, string2)
	return tikaclientClient, nil
}

var (
	_wireClientValue = http.DefaultClient
)

func InitS3(contextContext context.Context, configConfig *config.Config) (*minio.Client, error) {
	minioutilConfig := configConfig.S3
	client, err := minioutil.NewClientWithStartup(contextContext, minioutilConfig)
	if err != nil {
		return nil, err
	}
	return client, nil
}

func InitNatsJetstream(conn *nats.Conn) (jetstream.JetStream, error) {
	v := _wireValue2
	jetStream, err := jetstream.New(conn, v...)
	if err != nil {
		return nil, err
	}
	return jetStream, nil
}

var (
	_wireValue2 = []jetstream.JetStreamOpt(nil)
)

func InitShingleIndexRepository(conn *nats.Conn) (*shingleindexclient.Repository, error) {
	repository := shingleindexclient.NewRepository(conn)
	return repository, nil
}

func InitShingleIndexService(repository *shingleindexclient.Repository, service *document.Service) (*shingleindex.Service, error) {
	shingleindexService := shingleindex.NewService(repository, service)
	return shingleindexService, nil
}

func InitFulltextIndexRepository(conn *nats.Conn) (*fulltextindexclient.Repository, error) {
	repository := fulltextindexclient.NewRepository(conn)
	return repository, nil
}

func InitFulltextIndexService(repository *fulltextindexclient.Repository) (*fulltextindex.Service, error) {
	service := fulltextindex.NewService(repository)
	return service, nil
}

func InitDocumentFileRepository(client *minio.Client, configConfig *config.Config) (*anysave.Repository, error) {
	repository := anysave.NewRepository(client)
	return repository, nil
}

func InitDocumentRepository(client *elasticsearch.Client, configConfig *config.Config) (*document2.Repository, error) {
	opts := configConfig.DocumentRepo
	repository, err := document2.NewRepository(opts, client)
	if err != nil {
		return nil, err
	}
	return repository, nil
}

func InitDocumentStatusRepository(ctx context.Context, js jetstream.JetStream) (*documentstatus.Repository, error) {
	keyValue, err := ProvideDocumentStatusJetstreamKV(ctx, js)
	if err != nil {
		return nil, err
	}
	repository := documentstatus.NewRepository(keyValue, js)
	return repository, nil
}

func InitDocumentStatusService(repository *documentstatus.Repository) (*documentstatus2.Service, error) {
	service := documentstatus2.NewService(repository)
	return service, nil
}

func InitAnalyzeService(configConfig *config.Config, service *shingleindex.Service, fulltextindexService *fulltextindex.Service, documentService *document.Service) (*analyze.Service, error) {
	opts := ProvideAnalyzeServiceOpts()
	analyzeService := analyze.NewService(opts, documentService, service, fulltextindexService)
	return analyzeService, nil
}

func InitAnysaveService(client *minio.Client, configConfig *config.Config) (*anysave2.Service, error) {
	opts := ProvideAnysaveServiceOpts()
	repository, err := InitDocumentFileRepository(client, configConfig)
	if err != nil {
		return nil, err
	}
	service := anysave2.NewService(opts, repository)
	return service, nil
}

func InitDocumentParserService(client *tikaclient.Client) (*documentparser.Service, error) {
	service := documentparser.NewService(client)
	return service, nil
}

func InitDocumentService(configConfig *config.Config, client *tikaclient.Client, service *anysave2.Service, repository *document2.Repository) (*document.Service, error) {
	opts := ProvideDocumentServiceOpts()
	documentparserService, err := InitDocumentParserService(client)
	if err != nil {
		return nil, err
	}
	documentService := document.NewService(opts, repository, service, documentparserService)
	return documentService, nil
}

func InitDocumentHandler(service *document.Service) *document3.Handler {
	handler := document3.NewHandler(service)
	return handler
}

func InitAnysaveHandler(service *documentstatus2.Service, anysaveService *anysave2.Service) *anysave3.Handler {
	handler := anysave3.NewHandler(anysaveService, service)
	return handler
}

func InitAnalyzeHandler(service *analyze.Service) *analyze2.Handler {
	handler := analyze2.NewHandler(service)
	return handler
}

func InitRestAPI(contextContext context.Context, configConfig *config.Config) (*server.Server, error) {
	int2 := configConfig.Port
	v, err := ProvideSpec()
	if err != nil {
		return nil, err
	}
	client, err := InitTika(contextContext, configConfig)
	if err != nil {
		return nil, err
	}
	minioClient, err := InitS3(contextContext, configConfig)
	if err != nil {
		return nil, err
	}
	service, err := InitAnysaveService(minioClient, configConfig)
	if err != nil {
		return nil, err
	}
	elasticsearchClient, err := InitElastic(contextContext, configConfig)
	if err != nil {
		return nil, err
	}
	repository, err := InitDocumentRepository(elasticsearchClient, configConfig)
	if err != nil {
		return nil, err
	}
	documentService, err := InitDocumentService(configConfig, client, service, repository)
	if err != nil {
		return nil, err
	}
	handler := InitDocumentHandler(documentService)
	conn, err := InitNats(contextContext, configConfig)
	if err != nil {
		return nil, err
	}
	shingleindexclientRepository, err := InitShingleIndexRepository(conn)
	if err != nil {
		return nil, err
	}
	shingleindexService, err := InitShingleIndexService(shingleindexclientRepository, documentService)
	if err != nil {
		return nil, err
	}
	fulltextindexclientRepository, err := InitFulltextIndexRepository(conn)
	if err != nil {
		return nil, err
	}
	fulltextindexService, err := InitFulltextIndexService(fulltextindexclientRepository)
	if err != nil {
		return nil, err
	}
	analyzeService, err := InitAnalyzeService(configConfig, shingleindexService, fulltextindexService, documentService)
	if err != nil {
		return nil, err
	}
	analyzeHandler := InitAnalyzeHandler(analyzeService)
	jetStream, err := InitNatsJetstream(conn)
	if err != nil {
		return nil, err
	}
	documentstatusRepository, err := InitDocumentStatusRepository(contextContext, jetStream)
	if err != nil {
		return nil, err
	}
	documentstatusService, err := InitDocumentStatusService(documentstatusRepository)
	if err != nil {
		return nil, err
	}
	anysaveHandler := InitAnysaveHandler(documentstatusService, service)
	opts := server.Opts{
		Port:            int2,
		Spec:            v,
		DocumentHandler: handler,
		AnalyzeHandler:  analyzeHandler,
		FileHandler:     anysaveHandler,
	}
	serverServer, err := server.New(opts)
	if err != nil {
		return nil, err
	}
	return serverServer, nil
}

func InitFileSavedHandler(service *document.Service, anysaveService *anysave2.Service) (*filesaved.Handler, error) {
	handler := filesaved.NewHandler(anysaveService, service)
	return handler, nil
}

func InitDocumentNatsHandler(service *document.Service) *document4.Handler {
	handler := document4.NewHandler(service)
	return handler
}

func InitNatsAPI(contextContext context.Context, configConfig *config.Config) (*server2.Server, error) {
	conn, err := InitNats(contextContext, configConfig)
	if err != nil {
		return nil, err
	}
	client, err := InitTika(contextContext, configConfig)
	if err != nil {
		return nil, err
	}
	minioClient, err := InitS3(contextContext, configConfig)
	if err != nil {
		return nil, err
	}
	service, err := InitAnysaveService(minioClient, configConfig)
	if err != nil {
		return nil, err
	}
	elasticsearchClient, err := InitElastic(contextContext, configConfig)
	if err != nil {
		return nil, err
	}
	repository, err := InitDocumentRepository(elasticsearchClient, configConfig)
	if err != nil {
		return nil, err
	}
	documentService, err := InitDocumentService(configConfig, client, service, repository)
	if err != nil {
		return nil, err
	}
	handler := InitDocumentNatsHandler(documentService)
	serverServer := server2.NewServer(conn, handler)
	return serverServer, nil
}

func InitDocumentPipeline(contextContext context.Context, configConfig *config.Config) (*documentpipeline.Service, error) {
	conn, err := InitNats(contextContext, configConfig)
	if err != nil {
		return nil, err
	}
	jetStream, err := InitNatsJetstream(conn)
	if err != nil {
		return nil, err
	}
	stream, err := ProvideDocumentStatusJetstreamStream(contextContext, jetStream)
	if err != nil {
		return nil, err
	}
	repository, err := InitDocumentStatusRepository(contextContext, jetStream)
	if err != nil {
		return nil, err
	}
	service, err := InitDocumentStatusService(repository)
	if err != nil {
		return nil, err
	}
	client, err := InitTika(contextContext, configConfig)
	if err != nil {
		return nil, err
	}
	minioClient, err := InitS3(contextContext, configConfig)
	if err != nil {
		return nil, err
	}
	anysaveService, err := InitAnysaveService(minioClient, configConfig)
	if err != nil {
		return nil, err
	}
	elasticsearchClient, err := InitElastic(contextContext, configConfig)
	if err != nil {
		return nil, err
	}
	documentRepository, err := InitDocumentRepository(elasticsearchClient, configConfig)
	if err != nil {
		return nil, err
	}
	documentService, err := InitDocumentService(configConfig, client, anysaveService, documentRepository)
	if err != nil {
		return nil, err
	}
	handler, err := InitFileSavedHandler(documentService, anysaveService)
	if err != nil {
		return nil, err
	}
	v := ProvideDocumentPipelineStages(handler)
	documentpipelineService, err := documentpipeline.NewService(contextContext, stream, service, v)
	if err != nil {
		return nil, err
	}
	return documentpipelineService, nil
}

// wire.go:

func ProvideSpec() ([]byte, error) {
	f, err := os.Open("./api/rest/doc/openapi.yaml")
	if err != nil {
		return nil, err
	}

	spec, err := io.ReadAll(f)
	if err != nil {
		return nil, err
	}

	return spec, nil
}

func ProvideDocumentStatusJetstreamKV(
	ctx context.Context,
	js jetstream.JetStream,
) (jetstream.KeyValue, error) {
	kv, err := js.CreateOrUpdateKeyValue(ctx, jetstream.KeyValueConfig{
		Bucket: "documentstatus",
	})
	if err != nil {
		return nil, fmt.Errorf("new kv: %w", err)
	}

	return kv, nil
}

func ProvideDocumentStatusJetstreamStream(
	ctx context.Context,
	js jetstream.JetStream,
) (jetstream.Stream, error) {
	s, err := js.CreateOrUpdateStream(ctx, jetstream.StreamConfig{
		Name:      "documentstatus",
		Subjects:  []string{"documentstatus.>"},
		Retention: jetstream.WorkQueuePolicy,
	})
	if err != nil {
		return nil, fmt.Errorf("new steream: %w", err)
	}

	return s, nil
}

func ProvideAnalyzeServiceOpts() analyze.Opts {
	return analyze.Opts{}
}

func ProvideAnysaveServiceOpts() anysave2.Opts {
	return anysave2.Opts{}
}

func ProvideDocumentServiceOpts() document.Opts {
	return document.Opts{}
}

func ProvideDocumentPipelineStages(
	fsh *filesaved.Handler,
) []documentpipeline.Stage {
	return []documentpipeline.Stage{
		{
			Trigger: model.DocumentProcessingStatusFileSaved,
			Action:  fsh,
			Next:    model.DocumentProcessingStatusDocumentSaved,
		},
	}
}
