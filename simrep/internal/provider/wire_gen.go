// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package provider

import (
	"context"
	"github.com/elastic/go-elasticsearch/v8"
	"github.com/minio/minio-go/v7"
	"io"
	"os"
	"simrep/api/rest/server"
	document3 "simrep/api/rest/server/handler/document"
	"simrep/internal/config"
	"simrep/internal/repository/document"
	"simrep/internal/repository/documentfile"
	"simrep/internal/repository/image"
	document2 "simrep/internal/service/document"
	"simrep/pkg/elasticutil"
	"simrep/pkg/minioutil"
)

// Injectors from wire.go:

func InitConfig(path string) (*config.Config, error) {
	configConfig, err := config.New(path)
	if err != nil {
		return nil, err
	}
	return configConfig, nil
}

func InitElastic(contextContext context.Context, configConfig *config.Config) (*elasticsearch.Client, error) {
	elasticutilConfig := configConfig.Elastic
	client, err := elasticutil.NewClientWithStartup(contextContext, elasticutilConfig)
	if err != nil {
		return nil, err
	}
	return client, nil
}

func InitS3(contextContext context.Context, configConfig *config.Config) (*minio.Client, error) {
	minioutilConfig := configConfig.S3
	client, err := minioutil.NewClientWithStartup(contextContext, minioutilConfig)
	if err != nil {
		return nil, err
	}
	return client, nil
}

func InitDocumentFileRepository(client *minio.Client, configConfig *config.Config) (*documentfile.Repository, error) {
	opts := configConfig.DocumentFileRepo
	repository := documentfile.NewRepository(opts, client)
	return repository, nil
}

func InitImageRepository(client *minio.Client, configConfig *config.Config) (*image.Repository, error) {
	opts := configConfig.ImageRepo
	repository := image.NewRepository(opts, client)
	return repository, nil
}

func InitDocumentRepository(client *elasticsearch.Client, configConfig *config.Config) (*document.Repository, error) {
	opts := configConfig.DocumentRepo
	repository, err := document.NewRepository(opts, client)
	if err != nil {
		return nil, err
	}
	return repository, nil
}

func InitDocumentService(repository *image.Repository, documentfileRepository *documentfile.Repository, documentRepository *document.Repository) (*document2.Service, error) {
	service := document2.NewService(documentRepository, repository, documentfileRepository)
	return service, nil
}

func InitDocumentHandler(service *document2.Service) *document3.Handler {
	handler := document3.NewHandler(service)
	return handler
}

func InitRestAPI(contextContext context.Context, configConfig *config.Config) (*server.Server, error) {
	int2 := configConfig.Port
	v, err := ProvideSpec()
	if err != nil {
		return nil, err
	}
	client, err := InitS3(contextContext, configConfig)
	if err != nil {
		return nil, err
	}
	repository, err := InitImageRepository(client, configConfig)
	if err != nil {
		return nil, err
	}
	documentfileRepository, err := InitDocumentFileRepository(client, configConfig)
	if err != nil {
		return nil, err
	}
	elasticsearchClient, err := InitElastic(contextContext, configConfig)
	if err != nil {
		return nil, err
	}
	documentRepository, err := InitDocumentRepository(elasticsearchClient, configConfig)
	if err != nil {
		return nil, err
	}
	service, err := InitDocumentService(repository, documentfileRepository, documentRepository)
	if err != nil {
		return nil, err
	}
	handler := InitDocumentHandler(service)
	opts := server.Opts{
		Port:            int2,
		Spec:            v,
		DocumentHandler: handler,
	}
	serverServer, err := server.New(opts)
	if err != nil {
		return nil, err
	}
	return serverServer, nil
}

// wire.go:

func ProvideSpec() ([]byte, error) {
	f, err := os.Open("./api/rest/doc/openapi.yaml")
	if err != nil {
		return nil, err
	}

	spec, err := io.ReadAll(f)
	if err != nil {
		return nil, err
	}

	return spec, nil
}
