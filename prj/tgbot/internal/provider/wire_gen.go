// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package provider

import (
	"context"
	"github.com/elastic/go-elasticsearch/v8"
	"github.com/nats-io/nats.go"
	"github.com/zuzuka28/simreport/lib/elasticutil"
	"github.com/zuzuka28/simreport/prj/tgbot/internal/bot"
	"github.com/zuzuka28/simreport/prj/tgbot/internal/config"
	"github.com/zuzuka28/simreport/prj/tgbot/internal/repository/userstate"
	userstate2 "github.com/zuzuka28/simreport/prj/tgbot/internal/service/userstate"
	"sync"
)

// Injectors from wire.go:

func InitConfig(path string) (*config.Config, error) {
	configConfig, err := config.New(path)
	if err != nil {
		return nil, err
	}
	return configConfig, nil
}

func ProvideUserStateRepository(configConfig *config.Config, client *elasticsearch.Client) *userstate.Repository {
	userstateConfig := configConfig.UserStateRepo
	repository := userstate.NewRepository(userstateConfig, client)
	return repository
}

func ProvideUserStateService(repository *userstate.Repository) *userstate2.Service {
	service := userstate2.NewService(repository)
	return service
}

func InitBot(contextContext context.Context, configConfig *config.Config) (*bot.Bot, error) {
	botConfig := configConfig.Bot
	client, err := ProvideElastic(contextContext, configConfig)
	if err != nil {
		return nil, err
	}
	repository := ProvideUserStateRepository(configConfig, client)
	service := ProvideUserStateService(repository)
	botBot, err := bot.New(botConfig, service)
	if err != nil {
		return nil, err
	}
	return botBot, nil
}

// wire.go:

//nolint:gochecknoglobals
var (
	elasticCli     *elasticsearch.Client
	elasticCliOnce sync.Once
)

func ProvideElastic(
	ctx context.Context,
	cfg *config.Config,
) (*elasticsearch.Client, error) {
	var err error

	elasticCliOnce.Do(func() {
		elasticCli, err = elasticutil.NewClientWithStartup(ctx, cfg.Elastic)
	})

	return elasticCli, err
}

//nolint:gochecknoglobals
var (
	natsCli     *nats.Conn
	natsCliOnce sync.Once
)

func ProvideNats(
	_ context.Context,
	cfg *config.Config,
) (*nats.Conn, error) {
	var err error

	natsCliOnce.Do(func() {
		natsCli, err = nats.Connect(cfg.Nats)
	})

	return natsCli, err
}
