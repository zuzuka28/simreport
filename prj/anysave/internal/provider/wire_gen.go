// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package provider

import (
	"context"
	"github.com/minio/minio-go/v7"
	"github.com/nats-io/nats.go"
	"github.com/nats-io/nats.go/jetstream"
	"github.com/zuzuka28/simreport/lib/minioutil"
	"github.com/zuzuka28/simreport/prj/anysave/api/rest/server"
	anysave3 "github.com/zuzuka28/simreport/prj/anysave/api/rest/server/handler/anysave"
	"github.com/zuzuka28/simreport/prj/anysave/internal/config"
	"github.com/zuzuka28/simreport/prj/anysave/internal/repository/anysave"
	anysave2 "github.com/zuzuka28/simreport/prj/anysave/internal/service/anysave"
	"io"
	"os"
	"sync"
)

// Injectors from wire.go:

func InitConfig(path string) (*config.Config, error) {
	configConfig, err := config.New(path)
	if err != nil {
		return nil, err
	}
	return configConfig, nil
}

func InitNatsJetstream(conn *nats.Conn) (jetstream.JetStream, error) {
	v := _wireValue
	jetStream, err := jetstream.New(conn, v...)
	if err != nil {
		return nil, err
	}
	return jetStream, nil
}

var (
	_wireValue = []jetstream.JetStreamOpt(nil)
)

func InitDocumentFileRepository(client *minio.Client, configConfig *config.Config) (*anysave.Repository, error) {
	repository := anysave.NewRepository(client)
	return repository, nil
}

func InitAnysaveService(client *minio.Client, configConfig *config.Config) (*anysave2.Service, error) {
	opts := ProvideAnysaveServiceOpts()
	repository, err := InitDocumentFileRepository(client, configConfig)
	if err != nil {
		return nil, err
	}
	service := anysave2.NewService(opts, repository)
	return service, nil
}

func InitAnysaveHandler(service *anysave2.Service) *anysave3.Handler {
	handler := anysave3.NewHandler(service)
	return handler
}

func InitRestAPI(contextContext context.Context, configConfig *config.Config) (*server.Server, error) {
	int2 := configConfig.Port
	v, err := ProvideSpec()
	if err != nil {
		return nil, err
	}
	client, err := ProvideS3(contextContext, configConfig)
	if err != nil {
		return nil, err
	}
	service, err := InitAnysaveService(client, configConfig)
	if err != nil {
		return nil, err
	}
	handler := InitAnysaveHandler(service)
	opts := server.Opts{
		Port:        int2,
		Spec:        v,
		FileHandler: handler,
	}
	serverServer, err := server.New(opts)
	if err != nil {
		return nil, err
	}
	return serverServer, nil
}

// wire.go:

func ProvideSpec() ([]byte, error) {
	f, err := os.Open("./api/rest/doc/openapi.yaml")
	if err != nil {
		return nil, err
	}

	spec, err := io.ReadAll(f)
	if err != nil {
		return nil, err
	}

	return spec, nil
}

//nolint:gochecknoglobals
var (
	natsCli     *nats.Conn
	natsCliOnce sync.Once
)

func ProvideNats(
	ctx context.Context,
	cfg *config.Config,
) (*nats.Conn, error) {
	var err error

	natsCliOnce.Do(func() {
		natsCli, err = nats.Connect(cfg.Nats)
	})

	return natsCli, err
}

//nolint:gochecknoglobals
var (
	s3Cli     *minio.Client
	s3CliOnce sync.Once
)

func ProvideS3(
	ctx context.Context,
	cfg *config.Config,
) (*minio.Client, error) {
	var err error

	s3CliOnce.Do(func() {
		s3Cli, err = minioutil.NewClientWithStartup(ctx, cfg.S3)
	})

	return s3Cli, err
}

func ProvideAnysaveServiceOpts() anysave2.Opts {
	return anysave2.Opts{}
}
