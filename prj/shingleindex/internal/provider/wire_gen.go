// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package provider

import (
	"context"
	"github.com/nats-io/nats.go"
	"github.com/redis/go-redis/v9"
	server2 "github.com/zuzuka28/simreport/prj/shingleindex/api/nats/event"
	"github.com/zuzuka28/simreport/prj/shingleindex/api/nats/event/handler/indexer"
	shingleindex3 "github.com/zuzuka28/simreport/prj/shingleindex/api/nats/micro/handler/shingleindex"
	"github.com/zuzuka28/simreport/prj/shingleindex/api/nats/micro/server"
	"github.com/zuzuka28/simreport/prj/shingleindex/internal/config"
	"github.com/zuzuka28/simreport/prj/shingleindex/internal/repository/document"
	"github.com/zuzuka28/simreport/prj/shingleindex/internal/repository/shingleindex"
	document2 "github.com/zuzuka28/simreport/prj/shingleindex/internal/service/document"
	shingleindex2 "github.com/zuzuka28/simreport/prj/shingleindex/internal/service/shingleindex"
)

// Injectors from wire.go:

func InitConfig(path string) (*config.Config, error) {
	configConfig, err := config.New(path)
	if err != nil {
		return nil, err
	}
	return configConfig, nil
}

func InitNats(contextContext context.Context, configConfig *config.Config) (*nats.Conn, error) {
	string2 := configConfig.Nats
	v := _wireValue
	conn, err := nats.Connect(string2, v...)
	if err != nil {
		return nil, err
	}
	return conn, nil
}

var (
	_wireValue = []nats.Option(nil)
)

func InitDocumentRepository(conn *nats.Conn) (*document.Repository, error) {
	repository := document.NewRepository(conn)
	return repository, nil
}

func InitDocumentService(repository *document.Repository) (*document2.Service, error) {
	service := document2.NewService(repository)
	return service, nil
}

func InitShingleIndexRepository(client *redis.Client, configConfig *config.Config) (*shingleindex.Repository, error) {
	opts := _wireOptsValue
	repository, err := shingleindex.NewRepository(opts, client)
	if err != nil {
		return nil, err
	}
	return repository, nil
}

var (
	_wireOptsValue = shingleindex.Opts{}
)

func InitShingleIndexService(repository *shingleindex.Repository, service *document2.Service) (*shingleindex2.Service, error) {
	shingleindexService := shingleindex2.NewService(repository, service)
	return shingleindexService, nil
}

func InitShingleHandler(service *shingleindex2.Service, documentService *document2.Service) (*shingleindex3.Handler, error) {
	handler := shingleindex3.NewHandler(service, documentService)
	return handler, nil
}

func InitIndexerHandler(service *shingleindex2.Service, documentService *document2.Service) (*indexer.Handler, error) {
	handler := indexer.NewHandler(service, documentService)
	return handler, nil
}

func InitNatsMicroAPI(contextContext context.Context, configConfig *config.Config) (*server.Server, error) {
	conn, err := InitNats(contextContext, configConfig)
	if err != nil {
		return nil, err
	}
	client, err := ProvideRedis(configConfig)
	if err != nil {
		return nil, err
	}
	repository, err := InitShingleIndexRepository(client, configConfig)
	if err != nil {
		return nil, err
	}
	documentRepository, err := InitDocumentRepository(conn)
	if err != nil {
		return nil, err
	}
	service, err := InitDocumentService(documentRepository)
	if err != nil {
		return nil, err
	}
	shingleindexService, err := InitShingleIndexService(repository, service)
	if err != nil {
		return nil, err
	}
	handler, err := InitShingleHandler(shingleindexService, service)
	if err != nil {
		return nil, err
	}
	serverServer, err := server.NewServer(conn, handler)
	if err != nil {
		return nil, err
	}
	return serverServer, nil
}

func InitNatsEventAPI(contextContext context.Context, configConfig *config.Config) (*server2.Server, error) {
	conn, err := InitNats(contextContext, configConfig)
	if err != nil {
		return nil, err
	}
	client, err := ProvideRedis(configConfig)
	if err != nil {
		return nil, err
	}
	repository, err := InitShingleIndexRepository(client, configConfig)
	if err != nil {
		return nil, err
	}
	documentRepository, err := InitDocumentRepository(conn)
	if err != nil {
		return nil, err
	}
	service, err := InitDocumentService(documentRepository)
	if err != nil {
		return nil, err
	}
	shingleindexService, err := InitShingleIndexService(repository, service)
	if err != nil {
		return nil, err
	}
	handler, err := InitIndexerHandler(shingleindexService, service)
	if err != nil {
		return nil, err
	}
	serverServer := server2.NewServer(conn, handler)
	return serverServer, nil
}

// wire.go:

func ProvideRedis(
	cfg *config.Config,
) (*redis.Client, error) {
	u, err := redis.ParseURL(cfg.Redis.DSN)
	if err != nil {
		return nil, err
	}

	return redis.NewClient(u), nil
}
