// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package provider

import (
	"context"
	"github.com/minio/minio-go/v7"
	"github.com/nats-io/nats.go"
	"github.com/redis/go-redis/v9"
	"github.com/zuzuka28/simreport/lib/httpinstumentation"
	"github.com/zuzuka28/simreport/lib/minioutil"
	"github.com/zuzuka28/simreport/prj/shingleindex/internal/config"
	server2 "github.com/zuzuka28/simreport/prj/shingleindex/internal/handler/nats/event"
	"github.com/zuzuka28/simreport/prj/shingleindex/internal/handler/nats/event/handler/indexer"
	shingleindex3 "github.com/zuzuka28/simreport/prj/shingleindex/internal/handler/nats/micro/handler/shingleindex"
	"github.com/zuzuka28/simreport/prj/shingleindex/internal/handler/nats/micro/server"
	"github.com/zuzuka28/simreport/prj/shingleindex/internal/metrics"
	"github.com/zuzuka28/simreport/prj/shingleindex/internal/model"
	"github.com/zuzuka28/simreport/prj/shingleindex/internal/repository/document"
	"github.com/zuzuka28/simreport/prj/shingleindex/internal/repository/filestorage"
	"github.com/zuzuka28/simreport/prj/shingleindex/internal/repository/shingleindex"
	document2 "github.com/zuzuka28/simreport/prj/shingleindex/internal/service/document"
	shingleindex2 "github.com/zuzuka28/simreport/prj/shingleindex/internal/service/shingleindex"
	"net"
	"net/http"
	"sync"
	"time"
)

// Injectors from wire.go:

func InitFilestorageRepository(client *minio.Client, configConfig *config.Config, metricsMetrics *metrics.Metrics) (*filestorage.Repository, error) {
	repository := filestorage.NewRepository(client, metricsMetrics)
	return repository, nil
}

func InitDocumentRepository(conn *nats.Conn, metricsMetrics *metrics.Metrics) (*document.Repository, error) {
	repository := document.NewRepository(conn, metricsMetrics)
	return repository, nil
}

func InitDocumentService(repository *document.Repository) (*document2.Service, error) {
	service := document2.NewService(repository)
	return service, nil
}

func InitShingleIndexRepository(client *redis.Client, configConfig *config.Config) (*shingleindex.Repository, error) {
	opts := _wireOptsValue
	repository, err := shingleindex.NewRepository(opts, client)
	if err != nil {
		return nil, err
	}
	return repository, nil
}

var (
	_wireOptsValue = shingleindex.Opts{}
)

func InitShingleIndexService(repository *shingleindex.Repository, service *document2.Service) (*shingleindex2.Service, error) {
	shingleindexService := shingleindex2.NewService(repository, service)
	return shingleindexService, nil
}

func InitShingleHandler(service *shingleindex2.Service, documentService *document2.Service, repository *filestorage.Repository) (*shingleindex3.Handler, error) {
	handler := shingleindex3.NewHandler(service, documentService, repository)
	return handler, nil
}

func InitIndexerHandler(service *shingleindex2.Service, documentService *document2.Service, repository *filestorage.Repository) (*indexer.Handler, error) {
	handler := indexer.NewHandler(service, documentService, repository)
	return handler, nil
}

func InitNatsMicroAPI(contextContext context.Context, configConfig *config.Config, metricsMetrics *metrics.Metrics) (*server.Server, error) {
	conn, err := ProvideNats(contextContext, configConfig)
	if err != nil {
		return nil, err
	}
	client, err := ProvideRedis(configConfig)
	if err != nil {
		return nil, err
	}
	repository, err := InitShingleIndexRepository(client, configConfig)
	if err != nil {
		return nil, err
	}
	documentRepository, err := InitDocumentRepository(conn, metricsMetrics)
	if err != nil {
		return nil, err
	}
	service, err := InitDocumentService(documentRepository)
	if err != nil {
		return nil, err
	}
	shingleindexService, err := InitShingleIndexService(repository, service)
	if err != nil {
		return nil, err
	}
	minioClient, err := ProvideS3(contextContext, configConfig)
	if err != nil {
		return nil, err
	}
	filestorageRepository, err := InitFilestorageRepository(minioClient, configConfig, metricsMetrics)
	if err != nil {
		return nil, err
	}
	handler, err := InitShingleHandler(shingleindexService, service, filestorageRepository)
	if err != nil {
		return nil, err
	}
	serverServer := server.NewServer(conn, handler, metricsMetrics)
	return serverServer, nil
}

func InitNatsEventAPI(contextContext context.Context, configConfig *config.Config, metricsMetrics *metrics.Metrics) (*server2.Server, error) {
	conn, err := ProvideNats(contextContext, configConfig)
	if err != nil {
		return nil, err
	}
	client, err := ProvideRedis(configConfig)
	if err != nil {
		return nil, err
	}
	repository, err := InitShingleIndexRepository(client, configConfig)
	if err != nil {
		return nil, err
	}
	documentRepository, err := InitDocumentRepository(conn, metricsMetrics)
	if err != nil {
		return nil, err
	}
	service, err := InitDocumentService(documentRepository)
	if err != nil {
		return nil, err
	}
	shingleindexService, err := InitShingleIndexService(repository, service)
	if err != nil {
		return nil, err
	}
	minioClient, err := ProvideS3(contextContext, configConfig)
	if err != nil {
		return nil, err
	}
	filestorageRepository, err := InitFilestorageRepository(minioClient, configConfig, metricsMetrics)
	if err != nil {
		return nil, err
	}
	handler, err := InitIndexerHandler(shingleindexService, service, filestorageRepository)
	if err != nil {
		return nil, err
	}
	serverServer := server2.NewServer(conn, handler)
	return serverServer, nil
}

// wire.go:

func ProvideMetrics() *metrics.Metrics {
	return metrics.New()
}

func ProvideConfig(path string) (*config.Config, error) {
	cfg, err := config.New(path)
	if err != nil {
		return nil, err
	}

	defaultTransportDialContext := func(
		dialer *net.Dialer,
	) func(context.Context, string, string) (net.Conn, error) {
		return dialer.DialContext
	}

	transport := &httpinstumentation.InstumentedTransport{
		Transport: &http.Transport{
			Proxy: http.ProxyFromEnvironment,
			DialContext: defaultTransportDialContext(&net.Dialer{
				Timeout:   30 * time.Second,
				KeepAlive: 30 * time.Second,
			}),
			ForceAttemptHTTP2:     true,
			MaxIdleConns:          100,
			IdleConnTimeout:       90 * time.Second,
			TLSHandshakeTimeout:   10 * time.Second,
			ExpectContinueTimeout: 1 * time.Second,
		},
		ExtractAttrs: func(ctx context.Context) []any {
			return []any{"request_id", ctx.Value(model.RequestIDKey)}
		},
		LogRequestBody:  true,
		LogResponseBody: false,
	}

	cfg.S3.Transport = transport

	return cfg, nil
}

//nolint:gochecknoglobals
var (
	natsCli     *nats.Conn
	natsCliOnce sync.Once
)

func ProvideNats(
	_ context.Context,
	cfg *config.Config,
) (*nats.Conn, error) {
	var err error

	natsCliOnce.Do(func() {
		natsCli, err = nats.Connect(cfg.Nats)
	})

	return natsCli, err
}

func ProvideRedis(
	cfg *config.Config,
) (*redis.Client, error) {
	u, err := redis.ParseURL(cfg.Redis.DSN)
	if err != nil {
		return nil, err
	}

	return redis.NewClient(u), nil
}

//nolint:gochecknoglobals
var (
	s3Cli     *minio.Client
	s3CliOnce sync.Once
)

func ProvideS3(
	ctx context.Context,
	cfg *config.Config,
) (*minio.Client, error) {
	var err error

	s3CliOnce.Do(func() {
		s3Cli, err = minioutil.NewClientWithStartup(ctx, cfg.S3)
	})

	return s3Cli, err
}
