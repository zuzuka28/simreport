// Code generated by protoc-gen-natsmicro. DO NOT EDIT.

package similarityindex

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/nats-io/nats.go"
	"github.com/nats-io/nats.go/micro"
	"google.golang.org/protobuf/proto"
)

type Handler func(ctx context.Context, req micro.Request)

type ErrorHandler func(ctx context.Context, msg micro.Request, err error)

type Middleware func(Handler) Handler

// SimilarityIndexServerInterface is the server API for SimilarityIndex service.
type SimilarityIndexServerInterface interface {
	SearchSimilar(context.Context, *SearchSimilarRequest) (*SearchSimilarResponse, error)
	mustEmbedUnimplementedGreeterServer()
}

type UnimplementedSimilarityIndexServer struct{}

func (UnimplementedSimilarityIndexServer) SearchSimilar(context.Context, *SearchSimilarRequest) (*SearchSimilarResponse, error) {
	return nil, errors.New("method SearchSimilar not implemented")
}

func (UnimplementedSimilarityIndexServer) mustEmbedUnimplementedSimilarityIndexServer() {}

func (UnimplementedSimilarityIndexServer) testEmbeddedByValue() {}

type UnsafeSimilarityIndexServer interface {
	mustEmbedUnimplementedGreeterServer()
}

type SimilarityIndexServerConfig struct {
	micro.Config
	RequestTimeout       time.Duration
	Middleware           Middleware
	RequestErrorHandler  ErrorHandler
	ResponseErrorHandler ErrorHandler
}

type SimilarityIndexServer struct {
	nc   *nats.Conn
	impl SimilarityIndexServerInterface
	cfg  SimilarityIndexServerConfig
	done chan struct{}

	requestErrorHandlerFunc  ErrorHandler
	responseErrorHandlerFunc ErrorHandler
}

// NewSimilarityIndexServer  creates a new NATS microservice server.
func NewSimilarityIndexServer(
	cfg SimilarityIndexServerConfig,
	nc *nats.Conn,
	impl SimilarityIndexServerInterface,
) *SimilarityIndexServer {
	if t, ok := impl.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}

	if cfg.RequestTimeout == 0 {
		cfg.RequestTimeout = time.Second * 60
	}

	return &SimilarityIndexServer{
		nc:   nc,
		impl: impl,
		cfg:  cfg,
		done: make(chan struct{}),
		requestErrorHandlerFunc: func(_ context.Context, req micro.Request, _ error) {
			req.Error("500", "unproccessable request", nil, nil)
		},
		responseErrorHandlerFunc: func(_ context.Context, req micro.Request, _ error) {
			req.Error("500", "internal server error", nil, nil)
		},
	}
}

// Start starts the microservice and blocking until application context done.
func (s *SimilarityIndexServer) Start(ctx context.Context) error {
	srv, err := micro.AddService(s.nc, s.cfg.Config)
	if err != nil {
		return fmt.Errorf("failed to start microservice: %w", err)
	}

	defer srv.Stop()

	group := srv.AddGroup(s.cfg.Config.Name)

	// Register handlers
	if err := group.AddEndpoint("search_similar", s.toMicroHandler(s.handleSearchSimilar)); err != nil {
		return fmt.Errorf("failed to add endpoint SearchSimilar: %w", err)
	}

	select {
	case <-ctx.Done():
		return ctx.Err()
	case <-s.done:
		return nil
	}
}

func (s *SimilarityIndexServer) Stop() error {
	s.done <- struct{}{}
	return nil
}

func (s *SimilarityIndexServer) toMicroHandler(h Handler) micro.HandlerFunc {
	return func(req micro.Request) {
		ctx, cancel := context.WithTimeout(context.Background(), s.cfg.RequestTimeout)
		defer cancel()

		if s.cfg.Middleware != nil {
			h = s.cfg.Middleware(h)
		}

		h(ctx, req)
	}
}

func (s *SimilarityIndexServer) handleSearchSimilar(
	ctx context.Context,
	req micro.Request,
) {
	msg := new(SearchSimilarRequest)

	if err := proto.Unmarshal(req.Data(), msg); err != nil {
		s.requestErrorHandlerFunc(ctx, req, err)
		return
	}

	res, err := s.impl.SearchSimilar(ctx, msg)
	if err != nil {
		s.responseErrorHandlerFunc(ctx, req, err)
		return
	}

	resp, err := proto.Marshal(res)
	if err != nil {
		s.responseErrorHandlerFunc(ctx, req, err)
		return
	}

	req.Respond(resp)
}

type SimilarityIndexClientConfig struct {
	MicroSubject string
}

// SimilarityIndexClient is the client API for SimilarityIndex service.
type SimilarityIndexClient struct {
	nc  *nats.Conn
	cfg SimilarityIndexClientConfig
}

// NewSimilarityIndexClient creates a new NATS microservice client.
func NewSimilarityIndexClient(
	cfg SimilarityIndexClientConfig,
	nc *nats.Conn,
) *SimilarityIndexClient {
	return &SimilarityIndexClient{nc: nc, cfg: cfg}
}

func (c *SimilarityIndexClient) SearchSimilar(
	ctx context.Context,
	req *SearchSimilarRequest,
) (*SearchSimilarResponse, error) {
	resp := new(SearchSimilarResponse)

	data, err := proto.Marshal(req)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal request: %w", err)
	}

	msg, err := c.nc.RequestWithContext(ctx, c.cfg.MicroSubject+".search_similar", data)
	if err != nil {
		return nil, fmt.Errorf("failed to send request: %w", err)
	}

	if err := proto.Unmarshal(msg.Data, resp); err != nil {
		return nil, fmt.Errorf("failed to unmarshal response: %w", err)
	}

	return resp, nil
}
