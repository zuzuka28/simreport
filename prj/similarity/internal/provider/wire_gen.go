// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package provider

import (
	"context"
	"fmt"
	"github.com/elastic/go-elasticsearch/v8"
	"github.com/minio/minio-go/v7"
	"github.com/nats-io/nats.go"
	"github.com/zuzuka28/simreport/lib/elasticutil"
	"github.com/zuzuka28/simreport/lib/httpinstumentation"
	"github.com/zuzuka28/simreport/lib/minioutil"
	"github.com/zuzuka28/simreport/prj/similarity/internal/config"
	similarity3 "github.com/zuzuka28/simreport/prj/similarity/internal/handler/nats/handler/similarity"
	server2 "github.com/zuzuka28/simreport/prj/similarity/internal/handler/nats/server"
	"github.com/zuzuka28/simreport/prj/similarity/internal/handler/rest/server"
	similarity2 "github.com/zuzuka28/simreport/prj/similarity/internal/handler/rest/server/handler/similarity"
	"github.com/zuzuka28/simreport/prj/similarity/internal/metrics"
	"github.com/zuzuka28/simreport/prj/similarity/internal/model"
	"github.com/zuzuka28/simreport/prj/similarity/internal/repository/analyzehistory"
	"github.com/zuzuka28/simreport/prj/similarity/internal/repository/document"
	"github.com/zuzuka28/simreport/prj/similarity/internal/repository/filestorage"
	"github.com/zuzuka28/simreport/prj/similarity/internal/repository/similarityindexclient"
	document2 "github.com/zuzuka28/simreport/prj/similarity/internal/service/document"
	"github.com/zuzuka28/simreport/prj/similarity/internal/service/fulltextindex"
	"github.com/zuzuka28/simreport/prj/similarity/internal/service/semanticindex"
	"github.com/zuzuka28/simreport/prj/similarity/internal/service/shingleindex"
	"github.com/zuzuka28/simreport/prj/similarity/internal/service/similarity"
	"net"
	"net/http"
	"slices"
	"sync"
	"time"
)

// Injectors from wire.go:

func InitFilestorageRepository(client *minio.Client, configConfig *config.Config, metricsMetrics *metrics.Metrics) (*filestorage.Repository, error) {
	repository := filestorage.NewRepository(client, metricsMetrics)
	return repository, nil
}

func InitDocumentRepository(conn *nats.Conn, metricsMetrics *metrics.Metrics) (*document.Repository, error) {
	repository := document.NewRepository(conn, metricsMetrics)
	return repository, nil
}

func InitDocumentService(repository *document.Repository) (*document2.Service, error) {
	service := document2.NewService(repository)
	return service, nil
}

func InitSimilarityIndexRepository(opts similarityindexclient.Opts, conn *nats.Conn, metricsMetrics *metrics.Metrics) (*similarityindexclient.Repository, error) {
	repository := similarityindexclient.NewRepository(opts, conn, metricsMetrics)
	return repository, nil
}

func InitFulltextIndexService(conn *nats.Conn, metricsMetrics *metrics.Metrics) (*fulltextindex.Service, error) {
	opts := _wireOptsValue
	repository, err := InitSimilarityIndexRepository(opts, conn, metricsMetrics)
	if err != nil {
		return nil, err
	}
	service := fulltextindex.NewService(repository)
	return service, nil
}

var (
	_wireOptsValue = similarityindexclient.Opts{
		MicroSubject: "similarity_fulltext",
	}
)

func InitShingleIndexService(conn *nats.Conn, metricsMetrics *metrics.Metrics) (*shingleindex.Service, error) {
	opts := _wireSimilarityindexclientOptsValue
	repository, err := InitSimilarityIndexRepository(opts, conn, metricsMetrics)
	if err != nil {
		return nil, err
	}
	service := shingleindex.NewService(repository)
	return service, nil
}

var (
	_wireSimilarityindexclientOptsValue = similarityindexclient.Opts{
		MicroSubject: "similarity_shingle",
	}
)

func InitSemanticIndexService(conn *nats.Conn, metricsMetrics *metrics.Metrics) (*semanticindex.Service, error) {
	opts := _wireOptsValue2
	repository, err := InitSimilarityIndexRepository(opts, conn, metricsMetrics)
	if err != nil {
		return nil, err
	}
	service := semanticindex.NewService(repository)
	return service, nil
}

var (
	_wireOptsValue2 = similarityindexclient.Opts{
		MicroSubject: "similarity_semantic",
	}
)

func InitAnalyzeHistoryRepository(client *elasticsearch.Client, configConfig *config.Config, metricsMetrics *metrics.Metrics) (*analyzehistory.Repository, error) {
	opts := configConfig.AnalyzeHistoryRepo
	repository, err := analyzehistory.NewRepository(opts, client, metricsMetrics)
	if err != nil {
		return nil, err
	}
	return repository, nil
}

func InitAnalyzeService(configConfig *config.Config, conn *nats.Conn, service *document2.Service, repository *analyzehistory.Repository, filestorageRepository *filestorage.Repository, metricsMetrics *metrics.Metrics) (*similarity.Service, error) {
	opts := ProvideAnalyzeServiceOpts()
	v, err := provideAnalyzeServiceSearchIndices(configConfig, conn, metricsMetrics)
	if err != nil {
		return nil, err
	}
	similarityService := similarity.NewService(opts, service, filestorageRepository, v, repository)
	return similarityService, nil
}

func InitAnalyzeHandler(service *similarity.Service) *similarity2.Handler {
	handler := similarity2.NewHandler(service)
	return handler
}

func InitRestAPI(contextContext context.Context, configConfig *config.Config, metricsMetrics *metrics.Metrics) (*server.Server, error) {
	int2 := configConfig.Port
	conn, err := ProvideNats(contextContext, configConfig)
	if err != nil {
		return nil, err
	}
	repository, err := InitDocumentRepository(conn, metricsMetrics)
	if err != nil {
		return nil, err
	}
	service, err := InitDocumentService(repository)
	if err != nil {
		return nil, err
	}
	client, err := ProvideElastic(contextContext, configConfig)
	if err != nil {
		return nil, err
	}
	analyzehistoryRepository, err := InitAnalyzeHistoryRepository(client, configConfig, metricsMetrics)
	if err != nil {
		return nil, err
	}
	minioClient, err := ProvideS3(contextContext, configConfig)
	if err != nil {
		return nil, err
	}
	filestorageRepository, err := InitFilestorageRepository(minioClient, configConfig, metricsMetrics)
	if err != nil {
		return nil, err
	}
	similarityService, err := InitAnalyzeService(configConfig, conn, service, analyzehistoryRepository, filestorageRepository, metricsMetrics)
	if err != nil {
		return nil, err
	}
	handler := InitAnalyzeHandler(similarityService)
	opts := server.Opts{
		Port:           int2,
		AnalyzeHandler: handler,
		Metrics:        metricsMetrics,
	}
	serverServer, err := server.New(opts)
	if err != nil {
		return nil, err
	}
	return serverServer, nil
}

func InitAnalyzeNatsHandler(service *similarity.Service) *similarity3.Handler {
	handler := similarity3.NewHandler(service)
	return handler
}

func InitNatsAPI(contextContext context.Context, configConfig *config.Config, metricsMetrics *metrics.Metrics) (*server2.Server, error) {
	conn, err := ProvideNats(contextContext, configConfig)
	if err != nil {
		return nil, err
	}
	repository, err := InitDocumentRepository(conn, metricsMetrics)
	if err != nil {
		return nil, err
	}
	service, err := InitDocumentService(repository)
	if err != nil {
		return nil, err
	}
	client, err := ProvideElastic(contextContext, configConfig)
	if err != nil {
		return nil, err
	}
	analyzehistoryRepository, err := InitAnalyzeHistoryRepository(client, configConfig, metricsMetrics)
	if err != nil {
		return nil, err
	}
	minioClient, err := ProvideS3(contextContext, configConfig)
	if err != nil {
		return nil, err
	}
	filestorageRepository, err := InitFilestorageRepository(minioClient, configConfig, metricsMetrics)
	if err != nil {
		return nil, err
	}
	similarityService, err := InitAnalyzeService(configConfig, conn, service, analyzehistoryRepository, filestorageRepository, metricsMetrics)
	if err != nil {
		return nil, err
	}
	handler := InitAnalyzeNatsHandler(similarityService)
	serverServer := server2.NewServer(conn, handler, metricsMetrics)
	return serverServer, nil
}

// wire.go:

func ProvideMetrics() *metrics.Metrics {
	return metrics.New()
}

func ProvideConfig(path string) (*config.Config, error) {
	cfg, err := config.New(path)
	if err != nil {
		return nil, err
	}

	defaultTransportDialContext := func(
		dialer *net.Dialer,
	) func(context.Context, string, string) (net.Conn, error) {
		return dialer.DialContext
	}

	transport := &httpinstumentation.InstumentedTransport{
		Transport: &http.Transport{
			Proxy: http.ProxyFromEnvironment,
			DialContext: defaultTransportDialContext(&net.Dialer{
				Timeout:   30 * time.Second,
				KeepAlive: 30 * time.Second,
			}),
			ForceAttemptHTTP2:     true,
			MaxIdleConns:          100,
			IdleConnTimeout:       90 * time.Second,
			TLSHandshakeTimeout:   10 * time.Second,
			ExpectContinueTimeout: 1 * time.Second,
		},
		ExtractAttrs: func(ctx context.Context) []any {
			return []any{"request_id", ctx.Value(model.RequestIDKey)}
		},
		LogRequestBody:  true,
		LogResponseBody: false,
	}

	cfg.Elastic.Transport = transport
	cfg.S3.Transport = transport

	return cfg, nil
}

//nolint:gochecknoglobals
var (
	elasticCli     *elasticsearch.Client
	elasticCliOnce sync.Once
)

func ProvideElastic(
	ctx context.Context,
	cfg *config.Config,
) (*elasticsearch.Client, error) {
	var err error

	elasticCliOnce.Do(func() {
		elasticCli, err = elasticutil.NewClientWithStartup(ctx, cfg.Elastic)
	})

	return elasticCli, err
}

//nolint:gochecknoglobals
var (
	natsCli     *nats.Conn
	natsCliOnce sync.Once
)

func ProvideNats(
	_ context.Context,
	cfg *config.Config,
) (*nats.Conn, error) {
	var err error

	natsCliOnce.Do(func() {
		natsCli, err = nats.Connect(cfg.Nats)
	})

	return natsCli, err
}

//nolint:gochecknoglobals
var (
	s3Cli     *minio.Client
	s3CliOnce sync.Once
)

func ProvideS3(
	ctx context.Context,
	cfg *config.Config,
) (*minio.Client, error) {
	var err error

	s3CliOnce.Do(func() {
		s3Cli, err = minioutil.NewClientWithStartup(ctx, cfg.S3)
	})

	return s3Cli, err
}

func ProvideAnalyzeServiceOpts() similarity.Opts {
	return similarity.Opts{}
}

func provideAnalyzeServiceSearchIndices(
	cfg *config.Config,
	conn *nats.Conn,
	m *metrics.Metrics,
) ([]similarity.IndexingService, error) {
	var indices []similarity.IndexingService

	if slices.Contains(cfg.EnabledIndices, "shingleindex") {
		srv, err := InitShingleIndexService(conn, m)
		if err != nil {
			return nil, fmt.Errorf("init shingle index: %w", err)
		}

		indices = append(indices, srv)
	}

	if slices.Contains(cfg.EnabledIndices, "fulltextindex") {
		srv, err := InitFulltextIndexService(conn, m)
		if err != nil {
			return nil, fmt.Errorf("init fulltext index: %w", err)
		}

		indices = append(indices, srv)
	}

	if slices.Contains(cfg.EnabledIndices, "semanticindex") {
		srv, err := InitSemanticIndexService(conn, m)
		if err != nil {
			return nil, fmt.Errorf("init semantic index: %w", err)
		}

		indices = append(indices, srv)
	}

	return indices, nil
}
