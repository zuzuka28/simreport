// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package provider

import (
	"context"
	"github.com/elastic/go-elasticsearch/v8"
	"github.com/nats-io/nats.go"
	"github.com/zuzuka28/simreport/lib/elasticutil"
	similarity3 "github.com/zuzuka28/simreport/prj/similarity/api/nats/handler/similarity"
	server2 "github.com/zuzuka28/simreport/prj/similarity/api/nats/server"
	"github.com/zuzuka28/simreport/prj/similarity/api/rest/server"
	similarity2 "github.com/zuzuka28/simreport/prj/similarity/api/rest/server/handler/similarity"
	"github.com/zuzuka28/simreport/prj/similarity/internal/config"
	"github.com/zuzuka28/simreport/prj/similarity/internal/repository/analyzehistory"
	"github.com/zuzuka28/simreport/prj/similarity/internal/repository/document"
	"github.com/zuzuka28/simreport/prj/similarity/internal/repository/similarityindexclient"
	document2 "github.com/zuzuka28/simreport/prj/similarity/internal/service/document"
	"github.com/zuzuka28/simreport/prj/similarity/internal/service/fulltextindex"
	"github.com/zuzuka28/simreport/prj/similarity/internal/service/semanticindex"
	"github.com/zuzuka28/simreport/prj/similarity/internal/service/shingleindex"
	"github.com/zuzuka28/simreport/prj/similarity/internal/service/similarity"
	"io"
	"os"
	"sync"
)

// Injectors from wire.go:

func InitConfig(string2 string) (*config.Config, error) {
	configConfig, err := config.New(string2)
	if err != nil {
		return nil, err
	}
	return configConfig, nil
}

func InitDocumentRepository(conn *nats.Conn) (*document.Repository, error) {
	repository := document.NewRepository(conn)
	return repository, nil
}

func InitDocumentService(repository *document.Repository) (*document2.Service, error) {
	service := document2.NewService(repository)
	return service, nil
}

func InitSimilarityIndexRepository(opts similarityindexclient.Opts, conn *nats.Conn) (*similarityindexclient.Repository, error) {
	repository := similarityindexclient.NewRepository(opts, conn)
	return repository, nil
}

func InitFulltextIndexService(conn *nats.Conn) (*fulltextindex.Service, error) {
	opts := _wireOptsValue
	repository, err := InitSimilarityIndexRepository(opts, conn)
	if err != nil {
		return nil, err
	}
	service := fulltextindex.NewService(repository)
	return service, nil
}

var (
	_wireOptsValue = similarityindexclient.Opts{
		MicroSubject: "similarity_fulltext",
	}
)

func InitShingleIndexService(conn *nats.Conn) (*shingleindex.Service, error) {
	opts := _wireSimilarityindexclientOptsValue
	repository, err := InitSimilarityIndexRepository(opts, conn)
	if err != nil {
		return nil, err
	}
	service := shingleindex.NewService(repository)
	return service, nil
}

var (
	_wireSimilarityindexclientOptsValue = similarityindexclient.Opts{
		MicroSubject: "similarity_shingle",
	}
)

func InitSemanticIndexService(conn *nats.Conn) (*semanticindex.Service, error) {
	opts := _wireOptsValue2
	repository, err := InitSimilarityIndexRepository(opts, conn)
	if err != nil {
		return nil, err
	}
	service := semanticindex.NewService(repository)
	return service, nil
}

var (
	_wireOptsValue2 = similarityindexclient.Opts{
		MicroSubject: "similarity_semantic",
	}
)

func InitAnalyzeHistoryRepository(client *elasticsearch.Client, configConfig *config.Config) (*analyzehistory.Repository, error) {
	opts := configConfig.AnalyzeHistoryRepo
	repository, err := analyzehistory.NewRepository(opts, client)
	if err != nil {
		return nil, err
	}
	return repository, nil
}

func InitAnalyzeService(configConfig *config.Config, service *document2.Service, shingleindexService *shingleindex.Service, fulltextindexService *fulltextindex.Service, semanticindexService *semanticindex.Service, repository *analyzehistory.Repository) (*similarity.Service, error) {
	opts := ProvideAnalyzeServiceOpts()
	similarityService := similarity.NewService(opts, service, shingleindexService, fulltextindexService, semanticindexService, repository)
	return similarityService, nil
}

func InitAnalyzeHandler(service *similarity.Service) *similarity2.Handler {
	handler := similarity2.NewHandler(service)
	return handler
}

func InitRestAPI(contextContext context.Context, configConfig *config.Config) (*server.Server, error) {
	int2 := configConfig.Port
	v, err := ProvideSpec()
	if err != nil {
		return nil, err
	}
	conn, err := ProvideNats(contextContext, configConfig)
	if err != nil {
		return nil, err
	}
	repository, err := InitDocumentRepository(conn)
	if err != nil {
		return nil, err
	}
	service, err := InitDocumentService(repository)
	if err != nil {
		return nil, err
	}
	shingleindexService, err := InitShingleIndexService(conn)
	if err != nil {
		return nil, err
	}
	fulltextindexService, err := InitFulltextIndexService(conn)
	if err != nil {
		return nil, err
	}
	semanticindexService, err := InitSemanticIndexService(conn)
	if err != nil {
		return nil, err
	}
	client, err := ProvideElastic(contextContext, configConfig)
	if err != nil {
		return nil, err
	}
	analyzehistoryRepository, err := InitAnalyzeHistoryRepository(client, configConfig)
	if err != nil {
		return nil, err
	}
	similarityService, err := InitAnalyzeService(configConfig, service, shingleindexService, fulltextindexService, semanticindexService, analyzehistoryRepository)
	if err != nil {
		return nil, err
	}
	handler := InitAnalyzeHandler(similarityService)
	opts := server.Opts{
		Port:           int2,
		Spec:           v,
		AnalyzeHandler: handler,
	}
	serverServer, err := server.New(opts)
	if err != nil {
		return nil, err
	}
	return serverServer, nil
}

func InitAnalyzeNatsHandler(service *similarity.Service) *similarity3.Handler {
	handler := similarity3.NewHandler(service)
	return handler
}

func InitNatsAPI(contextContext context.Context, configConfig *config.Config) (*server2.Server, error) {
	conn, err := ProvideNats(contextContext, configConfig)
	if err != nil {
		return nil, err
	}
	repository, err := InitDocumentRepository(conn)
	if err != nil {
		return nil, err
	}
	service, err := InitDocumentService(repository)
	if err != nil {
		return nil, err
	}
	shingleindexService, err := InitShingleIndexService(conn)
	if err != nil {
		return nil, err
	}
	fulltextindexService, err := InitFulltextIndexService(conn)
	if err != nil {
		return nil, err
	}
	semanticindexService, err := InitSemanticIndexService(conn)
	if err != nil {
		return nil, err
	}
	client, err := ProvideElastic(contextContext, configConfig)
	if err != nil {
		return nil, err
	}
	analyzehistoryRepository, err := InitAnalyzeHistoryRepository(client, configConfig)
	if err != nil {
		return nil, err
	}
	similarityService, err := InitAnalyzeService(configConfig, service, shingleindexService, fulltextindexService, semanticindexService, analyzehistoryRepository)
	if err != nil {
		return nil, err
	}
	handler := InitAnalyzeNatsHandler(similarityService)
	serverServer := server2.NewServer(conn, handler)
	return serverServer, nil
}

// wire.go:

func ProvideSpec() ([]byte, error) {
	f, err := os.Open("./api/rest/doc/openapi.yaml")
	if err != nil {
		return nil, err
	}

	spec, err := io.ReadAll(f)
	if err != nil {
		return nil, err
	}

	return spec, nil
}

//nolint:gochecknoglobals
var (
	elasticCli     *elasticsearch.Client
	elasticCliOnce sync.Once
)

func ProvideElastic(
	ctx context.Context,
	cfg *config.Config,
) (*elasticsearch.Client, error) {
	var err error

	elasticCliOnce.Do(func() {
		elasticCli, err = elasticutil.NewClientWithStartup(ctx, cfg.Elastic)
	})

	return elasticCli, err
}

//nolint:gochecknoglobals
var (
	natsCli     *nats.Conn
	natsCliOnce sync.Once
)

func ProvideNats(
	_ context.Context,
	cfg *config.Config,
) (*nats.Conn, error) {
	var err error

	natsCliOnce.Do(func() {
		natsCli, err = nats.Connect(cfg.Nats)
	})

	return natsCli, err
}

func ProvideAnalyzeServiceOpts() similarity.Opts {
	return similarity.Opts{}
}
