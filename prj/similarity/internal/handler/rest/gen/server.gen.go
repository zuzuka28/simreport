// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// AnalyzedDocumentMatch defines model for AnalyzedDocumentMatch.
type AnalyzedDocumentMatch struct {
	Highlights    *[]string `json:"highlights,omitempty"`
	Id            *string   `json:"id,omitempty"`
	Rate          *float32  `json:"rate,omitempty"`
	SimilarImages *[]string `json:"similarImages,omitempty"`
}

// SimilaritySearchHistory defines model for SimilaritySearchHistory.
type SimilaritySearchHistory struct {
	Date       *time.Time               `json:"date,omitempty"`
	DocumentID *string                  `json:"documentID,omitempty"`
	Id         *string                  `json:"id,omitempty"`
	Matches    *[]AnalyzedDocumentMatch `json:"matches,omitempty"`
}

// SimilaritySearchHistoryRequest defines model for SimilaritySearchHistoryRequest.
type SimilaritySearchHistoryRequest struct {
	DateFrom   *time.Time `json:"dateFrom,omitempty"`
	DateTo     *time.Time `json:"dateTo,omitempty"`
	DocumentID *string    `json:"documentID,omitempty"`
	Limit      *int       `json:"limit,omitempty"`
	Offset     *int       `json:"offset,omitempty"`
}

// DocumentId defines model for DocumentId.
type DocumentId = string

// BadRequest defines model for BadRequest.
type BadRequest struct {
	Error *string `json:"error,omitempty"`
}

// ServerError defines model for ServerError.
type ServerError struct {
	Error *string `json:"error,omitempty"`
}

// SimilaritySearchHistoryResult defines model for SimilaritySearchHistoryResult.
type SimilaritySearchHistoryResult struct {
	Count     *int                       `json:"count,omitempty"`
	Documents *[]SimilaritySearchHistory `json:"documents,omitempty"`
}

// SimilaritySearchResult defines model for SimilaritySearchResult.
type SimilaritySearchResult struct {
	Documents *[]AnalyzedDocumentMatch `json:"documents,omitempty"`
}

// PostAnalyzeHistoryJSONRequestBody defines body for PostAnalyzeHistory for application/json ContentType.
type PostAnalyzeHistoryJSONRequestBody = SimilaritySearchHistoryRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /analyze/history)
	PostAnalyzeHistory(w http.ResponseWriter, r *http.Request)

	// (GET /analyze/{document_id}/similar)
	GetAnalyzeDocumentIdSimilar(w http.ResponseWriter, r *http.Request, documentId DocumentId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostAnalyzeHistory operation middleware
func (siw *ServerInterfaceWrapper) PostAnalyzeHistory(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAnalyzeHistory(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAnalyzeDocumentIdSimilar operation middleware
func (siw *ServerInterfaceWrapper) GetAnalyzeDocumentIdSimilar(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "document_id" -------------
	var documentId DocumentId

	err = runtime.BindStyledParameterWithOptions("simple", "document_id", mux.Vars(r)["document_id"], &documentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "document_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAnalyzeDocumentIdSimilar(w, r, documentId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/analyze/history", wrapper.PostAnalyzeHistory).Methods("POST")

	r.HandleFunc(options.BaseURL+"/analyze/{document_id}/similar", wrapper.GetAnalyzeDocumentIdSimilar).Methods("GET")

	return r
}

type BadRequestJSONResponse struct {
	Error *string `json:"error,omitempty"`
}

type ServerErrorJSONResponse struct {
	Error *string `json:"error,omitempty"`
}

type SimilaritySearchHistoryResultJSONResponse struct {
	Count     *int                       `json:"count,omitempty"`
	Documents *[]SimilaritySearchHistory `json:"documents,omitempty"`
}

type SimilaritySearchResultJSONResponse struct {
	Documents *[]AnalyzedDocumentMatch `json:"documents,omitempty"`
}

type PostAnalyzeHistoryRequestObject struct {
	Body *PostAnalyzeHistoryJSONRequestBody
}

type PostAnalyzeHistoryResponseObject interface {
	VisitPostAnalyzeHistoryResponse(w http.ResponseWriter) error
}

type PostAnalyzeHistory200JSONResponse struct {
	SimilaritySearchHistoryResultJSONResponse
}

func (response PostAnalyzeHistory200JSONResponse) VisitPostAnalyzeHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostAnalyzeHistory400JSONResponse struct{ BadRequestJSONResponse }

func (response PostAnalyzeHistory400JSONResponse) VisitPostAnalyzeHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostAnalyzeHistory500JSONResponse struct{ ServerErrorJSONResponse }

func (response PostAnalyzeHistory500JSONResponse) VisitPostAnalyzeHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAnalyzeDocumentIdSimilarRequestObject struct {
	DocumentId DocumentId `json:"document_id"`
}

type GetAnalyzeDocumentIdSimilarResponseObject interface {
	VisitGetAnalyzeDocumentIdSimilarResponse(w http.ResponseWriter) error
}

type GetAnalyzeDocumentIdSimilar200JSONResponse struct {
	SimilaritySearchResultJSONResponse
}

func (response GetAnalyzeDocumentIdSimilar200JSONResponse) VisitGetAnalyzeDocumentIdSimilarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAnalyzeDocumentIdSimilar400JSONResponse struct{ BadRequestJSONResponse }

func (response GetAnalyzeDocumentIdSimilar400JSONResponse) VisitGetAnalyzeDocumentIdSimilarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAnalyzeDocumentIdSimilar500JSONResponse struct{ ServerErrorJSONResponse }

func (response GetAnalyzeDocumentIdSimilar500JSONResponse) VisitGetAnalyzeDocumentIdSimilarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (POST /analyze/history)
	PostAnalyzeHistory(ctx context.Context, request PostAnalyzeHistoryRequestObject) (PostAnalyzeHistoryResponseObject, error)

	// (GET /analyze/{document_id}/similar)
	GetAnalyzeDocumentIdSimilar(ctx context.Context, request GetAnalyzeDocumentIdSimilarRequestObject) (GetAnalyzeDocumentIdSimilarResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// PostAnalyzeHistory operation middleware
func (sh *strictHandler) PostAnalyzeHistory(w http.ResponseWriter, r *http.Request) {
	var request PostAnalyzeHistoryRequestObject

	var body PostAnalyzeHistoryJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostAnalyzeHistory(ctx, request.(PostAnalyzeHistoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAnalyzeHistory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostAnalyzeHistoryResponseObject); ok {
		if err := validResponse.VisitPostAnalyzeHistoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAnalyzeDocumentIdSimilar operation middleware
func (sh *strictHandler) GetAnalyzeDocumentIdSimilar(w http.ResponseWriter, r *http.Request, documentId DocumentId) {
	var request GetAnalyzeDocumentIdSimilarRequestObject

	request.DocumentId = documentId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAnalyzeDocumentIdSimilar(ctx, request.(GetAnalyzeDocumentIdSimilarRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAnalyzeDocumentIdSimilar")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAnalyzeDocumentIdSimilarResponseObject); ok {
		if err := validResponse.VisitGetAnalyzeDocumentIdSimilarResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xWTW/bMAz9KwW3oxZnXxffWnQfOQwo2t2GYVBt2lZhSS5FF/AK/fdBsh0bqVMka5Gb",
	"LVF85HsUqUfIrG6sQcMO0kdoJEmNjBT/Lm3WajS8ycOfMpBCI7kCAUZqhBTyweCPykEA4X2rCHNImVoU",
	"4LIKtQxHuWuCuWNSpgTvfTB2jTUOI9CFzK/xvkXH4S+zhtHET9k0tcokK2uSO2dNWJvcNmQbJFa9EySy",
	"tIQmxhV7e4cZB3wv4AbpAenLeOhEoEqrWpLi7gYlZdV35dhSd42urV+Se2bb/tAAqgxjiQRebDWKdopR",
	"x4+3hAWk8CaZ9E965y7ZEyRMOUki2R2c5IuzOz6FcyPr7i/mYwX/kJxVBybgx8qNKMuenoRYqbKqVVnt",
	"xLhTFbv4AlS+aEaSMWwUlrRkSKGorWTYnjetvu3ldT3ZGy1LPAr7ae57y3NBkd34wsI7VhqnGCfgUb/N",
	"5WJcezjQgWk8gebPXMttT3qa/ley+ggKJONP+2qU1UqrPffdFoXDxb2lahegTBHjYsV12BvpO5tIOTu/",
	"2oCABySnwk2F9Wq9eh/BGjSyUZDCx9V6tQYRB0TkKJG9Hkk1KyLbsxm4jFc/TBa4so4H8caC64cJOr6w",
	"eXdU5/iPxjbKPMyl+RDbHVQf1ut9IFu75Pkm7wV8OsTLbCZ6AZ8PAp6NtL6RbUV4nI1qnwxNI3gscUGR",
	"bzgKMj0BhqyixNMj4ddyTJNJMntE+N+vQefpefT+XwAAAP//79seQygJAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
