// Code generated by protoc-gen-natsmicro. DO NOT EDIT.

package fulltextindex

import (
	"context"
	"fmt"
	"time"

	"github.com/nats-io/nats.go"
	"github.com/nats-io/nats.go/micro"
	"google.golang.org/protobuf/proto"
)

type Handler func(ctx context.Context, req micro.Request)

type ErrorHandler func(ctx context.Context, msg micro.Request, err error)

type Middleware func(Handler) Handler

// FullTextIndexServiceServer is the server API for FullTextIndexService service.
type FullTextIndexServiceServer interface {
	SearchSimilar(context.Context, *SearchSimilarRequest) (*SearchSimilarResponse, error)
}

type FullTextIndexServiceNatsServerConfig struct {
	micro.Config
	RequestTimeout time.Duration
	Middleware     Middleware
	OnError        ErrorHandler
}

type FullTextIndexServiceNatsServer struct {
	srv  micro.Service
	impl FullTextIndexServiceServer
	cfg  FullTextIndexServiceNatsServerConfig
}

// NewFullTextIndexServiceNatsServer  creates a new NATS microservice server.
func NewFullTextIndexServiceNatsServer(
	cfg FullTextIndexServiceNatsServerConfig,
	nc *nats.Conn,
	impl FullTextIndexServiceServer,
) (*FullTextIndexServiceNatsServer, error) {
	srv, err := micro.AddService(nc, cfg.Config)
	if err != nil {
		return nil, fmt.Errorf("failed to create microservice: %w", err)
	}

	if cfg.RequestTimeout == 0 {
		cfg.RequestTimeout = time.Second * 60
	}

	s := &FullTextIndexServiceNatsServer{
		srv:  srv,
		impl: impl,
		cfg:  cfg,
	}

	group := srv.AddGroup(cfg.Name)

	// Register handlers
	if err := group.AddEndpoint("search_similar", s.toMicroHandler(s.handleSearchSimilar)); err != nil {
		return nil, fmt.Errorf("failed to add endpoint SearchSimilar: %w", err)
	}

	return s, nil
}

// Stop stops the microservice.
func (s *FullTextIndexServiceNatsServer) Stop() error {
	return s.srv.Stop()
}

func (s *FullTextIndexServiceNatsServer) toMicroHandler(h Handler) micro.HandlerFunc {
	return func(req micro.Request) {
		ctx, cancel := context.WithTimeout(context.Background(), s.cfg.RequestTimeout)
		defer cancel()

		if s.cfg.Middleware != nil {
			h = s.cfg.Middleware(h)
		}

		h(ctx, req)
	}
}

func (s *FullTextIndexServiceNatsServer) handleSearchSimilar(
	ctx context.Context,
	req micro.Request,
) {
	msg := new(SearchSimilarRequest)

	if err := proto.Unmarshal(req.Data(), msg); err != nil {
		req.Error("500", "unproccessable request", nil, nil)
		return
	}

	res, err := s.impl.SearchSimilar(ctx, msg)
	if err != nil {
		if s.cfg.OnError != nil {
			s.cfg.OnError(ctx, req, err)
		} else {
			req.Error("500", "server error", nil, nil)
		}

		return
	}

	resp, err := proto.Marshal(res)
	if err != nil {
		req.Error("500", "server error", nil, nil)
		return
	}

	req.Respond(resp)
}

type FullTextIndexServiceNatsClientConfig struct {
	ServerName string
}

// FullTextIndexServiceClient is the client API for FullTextIndexService service.
type FullTextIndexServiceNatsClient struct {
	nc  *nats.Conn
	cfg FullTextIndexServiceNatsClientConfig
}

// NewFullTextIndexServiceClient creates a new NATS microservice client.
func NewFullTextIndexServiceClient(
	cfg FullTextIndexServiceNatsClientConfig,
	nc *nats.Conn,
) *FullTextIndexServiceNatsClient {
	return &FullTextIndexServiceNatsClient{nc: nc, cfg: cfg}
}

func (c *FullTextIndexServiceNatsClient) SearchSimilar(
	ctx context.Context,
	req *SearchSimilarRequest,
) (*SearchSimilarResponse, error) {
	resp := new(SearchSimilarResponse)

	data, err := proto.Marshal(req)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal request: %w", err)
	}

	msg, err := c.nc.RequestWithContext(ctx, c.cfg.ServerName+".search_similar", data)
	if err != nil {
		return nil, fmt.Errorf("failed to send request: %w", err)
	}

	if err := proto.Unmarshal(msg.Data, resp); err != nil {
		return nil, fmt.Errorf("failed to unmarshal response: %w", err)
	}

	return resp, nil
}
