// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package provider

import (
	"context"
	"github.com/elastic/go-elasticsearch/v8"
	"github.com/nats-io/nats.go"
	"github.com/zuzuka28/simreport/lib/elasticutil"
	server2 "github.com/zuzuka28/simreport/prj/fulltextindex/api/nats/event"
	"github.com/zuzuka28/simreport/prj/fulltextindex/api/nats/event/handler/indexer"
	fulltextindex3 "github.com/zuzuka28/simreport/prj/fulltextindex/api/nats/micro/handler/fulltextindex"
	"github.com/zuzuka28/simreport/prj/fulltextindex/api/nats/micro/server"
	"github.com/zuzuka28/simreport/prj/fulltextindex/internal/config"
	"github.com/zuzuka28/simreport/prj/fulltextindex/internal/repository/document"
	"github.com/zuzuka28/simreport/prj/fulltextindex/internal/repository/fulltextindex"
	document2 "github.com/zuzuka28/simreport/prj/fulltextindex/internal/service/document"
	fulltextindex2 "github.com/zuzuka28/simreport/prj/fulltextindex/internal/service/fulltextindex"
)

// Injectors from wire.go:

func InitConfig(path string) (*config.Config, error) {
	configConfig, err := config.New(path)
	if err != nil {
		return nil, err
	}
	return configConfig, nil
}

func InitElastic(contextContext context.Context, configConfig *config.Config) (*elasticsearch.Client, error) {
	elasticutilConfig := configConfig.Elastic
	client, err := elasticutil.NewClientWithStartup(contextContext, elasticutilConfig)
	if err != nil {
		return nil, err
	}
	return client, nil
}

func InitNats(contextContext context.Context, configConfig *config.Config) (*nats.Conn, error) {
	string2 := configConfig.Nats
	v := _wireValue
	conn, err := nats.Connect(string2, v...)
	if err != nil {
		return nil, err
	}
	return conn, nil
}

var (
	_wireValue = []nats.Option(nil)
)

func InitDocumentRepository(conn *nats.Conn) (*document.Repository, error) {
	repository := document.NewRepository(conn)
	return repository, nil
}

func InitDocumentService(repository *document.Repository) (*document2.Service, error) {
	service := document2.NewService(repository)
	return service, nil
}

func InitFulltextIndexRepository(client *elasticsearch.Client, configConfig *config.Config) (*fulltextindex.Repository, error) {
	opts := configConfig.FulltextRepo
	repository, err := fulltextindex.NewRepository(opts, client)
	if err != nil {
		return nil, err
	}
	return repository, nil
}

func InitFulltextIndexService(repository *fulltextindex.Repository) (*fulltextindex2.Service, error) {
	service := fulltextindex2.NewService(repository)
	return service, nil
}

func InitFulltextHandler(service *fulltextindex2.Service, documentService *document2.Service) (*fulltextindex3.Handler, error) {
	handler := fulltextindex3.NewHandler(service, documentService)
	return handler, nil
}

func InitIndexerHandler(service *fulltextindex2.Service, documentService *document2.Service) (*indexer.Handler, error) {
	handler := indexer.NewHandler(service, documentService)
	return handler, nil
}

func InitNatsMicroAPI(contextContext context.Context, configConfig *config.Config) (*server.Server, error) {
	conn, err := InitNats(contextContext, configConfig)
	if err != nil {
		return nil, err
	}
	client, err := InitElastic(contextContext, configConfig)
	if err != nil {
		return nil, err
	}
	repository, err := InitFulltextIndexRepository(client, configConfig)
	if err != nil {
		return nil, err
	}
	service, err := InitFulltextIndexService(repository)
	if err != nil {
		return nil, err
	}
	documentRepository, err := InitDocumentRepository(conn)
	if err != nil {
		return nil, err
	}
	documentService, err := InitDocumentService(documentRepository)
	if err != nil {
		return nil, err
	}
	handler, err := InitFulltextHandler(service, documentService)
	if err != nil {
		return nil, err
	}
	serverServer, err := server.NewServer(conn, handler)
	if err != nil {
		return nil, err
	}
	return serverServer, nil
}

func InitNatsEventAPI(contextContext context.Context, configConfig *config.Config) (*server2.Server, error) {
	conn, err := InitNats(contextContext, configConfig)
	if err != nil {
		return nil, err
	}
	client, err := InitElastic(contextContext, configConfig)
	if err != nil {
		return nil, err
	}
	repository, err := InitFulltextIndexRepository(client, configConfig)
	if err != nil {
		return nil, err
	}
	service, err := InitFulltextIndexService(repository)
	if err != nil {
		return nil, err
	}
	documentRepository, err := InitDocumentRepository(conn)
	if err != nil {
		return nil, err
	}
	documentService, err := InitDocumentService(documentRepository)
	if err != nil {
		return nil, err
	}
	handler, err := InitIndexerHandler(service, documentService)
	if err != nil {
		return nil, err
	}
	serverServer := server2.NewServer(conn, handler)
	return serverServer, nil
}
