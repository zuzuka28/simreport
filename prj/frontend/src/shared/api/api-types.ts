/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/document/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Загрузка документа
         * @description Загружает документ для дальнейшего анализа на сходство.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "multipart/form-data": components["schemas"]["UploadRequest"];
                };
            };
            responses: {
                200: components["responses"]["UploadSuccess"];
                400: components["responses"]["BadRequest"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/document/{document_id}/download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Скачать документ
         * @description Позволяет скачать загруженный документ по его идентификатору.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Уникальный идентификатор документа */
                    document_id: components["parameters"]["DocumentId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Успешная загрузка документа */
                200: {
                    headers: {
                        "Content-Disposition"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/octet-stream": string;
                    };
                };
                404: components["responses"]["DocumentNotFound"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/document/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Поиск документов по имени
         * @description Получить список документов, соответствующих заданному имени.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SearchRequest"];
                };
            };
            responses: {
                200: components["responses"]["SearchResult"];
                400: components["responses"]["BadRequest"];
                500: components["responses"]["ServerError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/analyze/{document_id}/similar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Поиск подожих документов
         * @description Получить список документов, наиболее похожих на загруженный
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Уникальный идентификатор документа */
                    document_id: components["parameters"]["DocumentId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["SimilaritySearchResult"];
                400: components["responses"]["BadRequest"];
                500: components["responses"]["ServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        UploadRequest: {
            /**
             * Format: binary
             * @description Документ для загрузки
             */
            document?: string;
        };
        SearchRequest: {
            /**
             * @description Имя документа для поиска
             * @example Документ 1
             */
            name?: string;
        };
        Document: {
            ID?: string;
            ImageIDs?: string[];
            /** @description Содержимое текста документа */
            TextContent?: string;
        };
        DocumentSummary: {
            /**
             * @description Идентификатор документа
             * @example 123
             */
            id?: string;
            /**
             * @description Имя документа
             * @example Документ 1
             */
            name?: string;
            /**
             * Format: date-time
             * @description Дата обновления документа
             * @example 2024-10-01T12:00:00Z
             */
            lastUpdated?: string;
        };
        AnalyzedDocumentMatch: {
            /** @description Уникальный идентификатор документа. */
            id?: string;
            /**
             * Format: float
             * @description Коэффициент похожести (например, от 0 до 1).
             */
            rate?: number;
            /** @description Список фрагментов текста, которые совпадают в документах. */
            highlights?: string[];
            /** @description Список идентификаторов похожих изображений. */
            similarImages?: string[];
        };
    };
    responses: {
        /** @description Документ успешно загружен */
        UploadSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @description Уникальный идентификатор загруженного документа */
                    documentID?: string;
                };
            };
        };
        /** @description Результаты поиска документов */
        SearchResult: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    documents?: components["schemas"]["DocumentSummary"][];
                };
            };
        };
        /** @description Результаты поиска схожих документов */
        SimilaritySearchResult: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    documents?: components["schemas"]["AnalyzedDocumentMatch"][];
                };
            };
        };
        /** @description Документ не найден */
        DocumentNotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @example Документ не найден */
                    error?: string;
                };
            };
        };
        /** @description Ошибка валидации или неверный формат запроса */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @example Неверный запрос */
                    error?: string;
                };
            };
        };
        /** @description Внутренняя ошибка сервера */
        ServerError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @example Ошибка сервера */
                    error?: string;
                };
            };
        };
    };
    parameters: {
        /** @description Уникальный идентификатор документа */
        DocumentId: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
