// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package provider

import (
	"context"
	"github.com/elastic/go-elasticsearch/v8"
	"github.com/nats-io/nats.go"
	"github.com/zuzuka28/simreport/lib/elasticutil"
	server2 "github.com/zuzuka28/simreport/prj/semanticindex/api/nats/event"
	"github.com/zuzuka28/simreport/prj/semanticindex/api/nats/event/handler/indexer"
	semanticindex3 "github.com/zuzuka28/simreport/prj/semanticindex/api/nats/micro/handler/semanticindex"
	"github.com/zuzuka28/simreport/prj/semanticindex/api/nats/micro/server"
	"github.com/zuzuka28/simreport/prj/semanticindex/internal/config"
	"github.com/zuzuka28/simreport/prj/semanticindex/internal/metrics"
	"github.com/zuzuka28/simreport/prj/semanticindex/internal/repository/document"
	"github.com/zuzuka28/simreport/prj/semanticindex/internal/repository/semanticindex"
	"github.com/zuzuka28/simreport/prj/semanticindex/internal/repository/vectorizer"
	document2 "github.com/zuzuka28/simreport/prj/semanticindex/internal/service/document"
	semanticindex2 "github.com/zuzuka28/simreport/prj/semanticindex/internal/service/semanticindex"
	vectorizer2 "github.com/zuzuka28/simreport/prj/semanticindex/internal/service/vectorizer"
	"sync"
)

// Injectors from wire.go:

func InitConfig(path string) (*config.Config, error) {
	configConfig, err := config.New(path)
	if err != nil {
		return nil, err
	}
	return configConfig, nil
}

func InitElastic(contextContext context.Context, configConfig *config.Config) (*elasticsearch.Client, error) {
	elasticutilConfig := configConfig.Elastic
	client, err := elasticutil.NewClientWithStartup(contextContext, elasticutilConfig)
	if err != nil {
		return nil, err
	}
	return client, nil
}

func InitDocumentRepository(conn *nats.Conn, metricsMetrics *metrics.Metrics) (*document.Repository, error) {
	repository := document.NewRepository(conn, metricsMetrics)
	return repository, nil
}

func InitVectorizerRepository(configConfig *config.Config, metricsMetrics *metrics.Metrics) (*vectorizer.Repository, error) {
	opts := configConfig.VectorizerRepo
	repository, err := vectorizer.NewRepository(opts, metricsMetrics)
	if err != nil {
		return nil, err
	}
	return repository, nil
}

func InitDocumentService(repository *document.Repository) (*document2.Service, error) {
	service := document2.NewService(repository)
	return service, nil
}

func InitSemanticIndexRepository(client *elasticsearch.Client, configConfig *config.Config, metricsMetrics *metrics.Metrics) (*semanticindex.Repository, error) {
	opts := configConfig.SemanticRepo
	repository, err := semanticindex.NewRepository(opts, client, metricsMetrics)
	if err != nil {
		return nil, err
	}
	return repository, nil
}

func InitVectorizerService(configConfig *config.Config, repository *vectorizer.Repository) (*vectorizer2.Service, error) {
	service := vectorizer2.NewService(repository)
	return service, nil
}

func InitSemanticIndexService(repository *semanticindex.Repository, service *vectorizer2.Service) (*semanticindex2.Service, error) {
	semanticindexService := semanticindex2.NewService(repository, service)
	return semanticindexService, nil
}

func InitSemanticHandler(service *semanticindex2.Service, documentService *document2.Service) (*semanticindex3.Handler, error) {
	handler := semanticindex3.NewHandler(service, documentService)
	return handler, nil
}

func InitIndexerHandler(service *semanticindex2.Service, documentService *document2.Service) (*indexer.Handler, error) {
	handler := indexer.NewHandler(service, documentService)
	return handler, nil
}

func InitNatsMicroAPI(contextContext context.Context, configConfig *config.Config) (*server.Server, error) {
	conn, err := ProvideNats(contextContext, configConfig)
	if err != nil {
		return nil, err
	}
	client, err := InitElastic(contextContext, configConfig)
	if err != nil {
		return nil, err
	}
	metricsMetrics := ProvideMetrics()
	repository, err := InitSemanticIndexRepository(client, configConfig, metricsMetrics)
	if err != nil {
		return nil, err
	}
	vectorizerRepository, err := InitVectorizerRepository(configConfig, metricsMetrics)
	if err != nil {
		return nil, err
	}
	service, err := InitVectorizerService(configConfig, vectorizerRepository)
	if err != nil {
		return nil, err
	}
	semanticindexService, err := InitSemanticIndexService(repository, service)
	if err != nil {
		return nil, err
	}
	documentRepository, err := InitDocumentRepository(conn, metricsMetrics)
	if err != nil {
		return nil, err
	}
	documentService, err := InitDocumentService(documentRepository)
	if err != nil {
		return nil, err
	}
	handler, err := InitSemanticHandler(semanticindexService, documentService)
	if err != nil {
		return nil, err
	}
	serverServer := server.NewServer(conn, handler, metricsMetrics)
	return serverServer, nil
}

func InitNatsEventAPI(contextContext context.Context, configConfig *config.Config) (*server2.Server, error) {
	conn, err := ProvideNats(contextContext, configConfig)
	if err != nil {
		return nil, err
	}
	client, err := InitElastic(contextContext, configConfig)
	if err != nil {
		return nil, err
	}
	metricsMetrics := ProvideMetrics()
	repository, err := InitSemanticIndexRepository(client, configConfig, metricsMetrics)
	if err != nil {
		return nil, err
	}
	vectorizerRepository, err := InitVectorizerRepository(configConfig, metricsMetrics)
	if err != nil {
		return nil, err
	}
	service, err := InitVectorizerService(configConfig, vectorizerRepository)
	if err != nil {
		return nil, err
	}
	semanticindexService, err := InitSemanticIndexService(repository, service)
	if err != nil {
		return nil, err
	}
	documentRepository, err := InitDocumentRepository(conn, metricsMetrics)
	if err != nil {
		return nil, err
	}
	documentService, err := InitDocumentService(documentRepository)
	if err != nil {
		return nil, err
	}
	handler, err := InitIndexerHandler(semanticindexService, documentService)
	if err != nil {
		return nil, err
	}
	serverServer := server2.NewServer(conn, handler)
	return serverServer, nil
}

// wire.go:

//nolint:gochecknoglobals
var (
	metricsS    *metrics.Metrics
	metricsOnce sync.Once
)

func ProvideMetrics() *metrics.Metrics {
	metricsOnce.Do(func() {
		metricsS = metrics.New()
	})

	return metricsS
}

//nolint:gochecknoglobals
var (
	natsCli     *nats.Conn
	natsCliOnce sync.Once
)

func ProvideNats(
	_ context.Context,
	cfg *config.Config,
) (*nats.Conn, error) {
	var err error

	natsCliOnce.Do(func() {
		natsCli, err = nats.Connect(cfg.Nats)
	})

	return natsCli, err
}
