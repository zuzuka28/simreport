// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"mime/multipart"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Attribute defines model for Attribute.
type Attribute struct {
	Label string `json:"label"`
	Value string `json:"value"`
}

// AttributeRequest defines model for AttributeRequest.
type AttributeRequest struct {
	Attribute string `json:"attribute"`
}

// DocumentSummary defines model for DocumentSummary.
type DocumentSummary struct {
	GroupID     *[]string  `json:"groupID,omitempty"`
	Id          *string    `json:"id,omitempty"`
	LastUpdated *time.Time `json:"lastUpdated,omitempty"`
	Name        *string    `json:"name,omitempty"`
	ParentID    *string    `json:"parentID,omitempty"`
	Version     *int       `json:"version,omitempty"`
}

// SearchRequest defines model for SearchRequest.
type SearchRequest struct {
	GroupID  *[]string `json:"groupID,omitempty"`
	Name     *string   `json:"name,omitempty"`
	ParentID *string   `json:"parentID,omitempty"`
	Version  *string   `json:"version,omitempty"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	// Document Document to upload
	Document openapi_types.File `json:"document"`
	GroupID  *[]string          `json:"groupID,omitempty"`
	ParentID *string            `json:"parentID,omitempty"`
	Version  *int               `json:"version,omitempty"`
}

// DocumentId defines model for DocumentId.
type DocumentId = string

// AttributeResult defines model for AttributeResult.
type AttributeResult struct {
	Items *[]Attribute `json:"items,omitempty"`
}

// BadRequest defines model for BadRequest.
type BadRequest struct {
	Error *string `json:"error,omitempty"`
}

// DocumentNotFound defines model for DocumentNotFound.
type DocumentNotFound struct {
	Error *string `json:"error,omitempty"`
}

// SearchResult defines model for SearchResult.
type SearchResult struct {
	Documents *[]DocumentSummary `json:"documents,omitempty"`
}

// ServerError defines model for ServerError.
type ServerError struct {
	Error *string `json:"error,omitempty"`
}

// UploadSuccess defines model for UploadSuccess.
type UploadSuccess struct {
	DocumentID *string `json:"documentID,omitempty"`
}

// PostAttributeJSONRequestBody defines body for PostAttribute for application/json ContentType.
type PostAttributeJSONRequestBody = AttributeRequest

// PostSearchJSONRequestBody defines body for PostSearch for application/json ContentType.
type PostSearchJSONRequestBody = SearchRequest

// PostUploadMultipartRequestBody defines body for PostUpload for multipart/form-data ContentType.
type PostUploadMultipartRequestBody = UploadRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /attribute)
	PostAttribute(w http.ResponseWriter, r *http.Request)

	// (POST /search)
	PostSearch(w http.ResponseWriter, r *http.Request)

	// (POST /upload)
	PostUpload(w http.ResponseWriter, r *http.Request)
	// Download document
	// (GET /{document_id}/download)
	GetDocumentIdDownload(w http.ResponseWriter, r *http.Request, documentId DocumentId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostAttribute operation middleware
func (siw *ServerInterfaceWrapper) PostAttribute(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAttribute(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostSearch operation middleware
func (siw *ServerInterfaceWrapper) PostSearch(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostSearch(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostUpload operation middleware
func (siw *ServerInterfaceWrapper) PostUpload(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUpload(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDocumentIdDownload operation middleware
func (siw *ServerInterfaceWrapper) GetDocumentIdDownload(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "document_id" -------------
	var documentId DocumentId

	err = runtime.BindStyledParameterWithOptions("simple", "document_id", mux.Vars(r)["document_id"], &documentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "document_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDocumentIdDownload(w, r, documentId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/attribute", wrapper.PostAttribute).Methods("POST")

	r.HandleFunc(options.BaseURL+"/search", wrapper.PostSearch).Methods("POST")

	r.HandleFunc(options.BaseURL+"/upload", wrapper.PostUpload).Methods("POST")

	r.HandleFunc(options.BaseURL+"/{document_id}/download", wrapper.GetDocumentIdDownload).Methods("GET")

	return r
}

type AttributeResultJSONResponse struct {
	Items *[]Attribute `json:"items,omitempty"`
}

type BadRequestJSONResponse struct {
	Error *string `json:"error,omitempty"`
}

type DocumentNotFoundJSONResponse struct {
	Error *string `json:"error,omitempty"`
}

type SearchResultJSONResponse struct {
	Documents *[]DocumentSummary `json:"documents,omitempty"`
}

type ServerErrorJSONResponse struct {
	Error *string `json:"error,omitempty"`
}

type UploadSuccessJSONResponse struct {
	DocumentID *string `json:"documentID,omitempty"`
}

type PostAttributeRequestObject struct {
	Body *PostAttributeJSONRequestBody
}

type PostAttributeResponseObject interface {
	VisitPostAttributeResponse(w http.ResponseWriter) error
}

type PostAttribute200JSONResponse struct{ AttributeResultJSONResponse }

func (response PostAttribute200JSONResponse) VisitPostAttributeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostAttribute400JSONResponse struct{ BadRequestJSONResponse }

func (response PostAttribute400JSONResponse) VisitPostAttributeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostAttribute500JSONResponse struct{ ServerErrorJSONResponse }

func (response PostAttribute500JSONResponse) VisitPostAttributeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostSearchRequestObject struct {
	Body *PostSearchJSONRequestBody
}

type PostSearchResponseObject interface {
	VisitPostSearchResponse(w http.ResponseWriter) error
}

type PostSearch200JSONResponse struct{ SearchResultJSONResponse }

func (response PostSearch200JSONResponse) VisitPostSearchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSearch400JSONResponse struct{ BadRequestJSONResponse }

func (response PostSearch400JSONResponse) VisitPostSearchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostSearch500JSONResponse struct{ ServerErrorJSONResponse }

func (response PostSearch500JSONResponse) VisitPostSearchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostUploadRequestObject struct {
	Body *multipart.Reader
}

type PostUploadResponseObject interface {
	VisitPostUploadResponse(w http.ResponseWriter) error
}

type PostUpload200JSONResponse struct{ UploadSuccessJSONResponse }

func (response PostUpload200JSONResponse) VisitPostUploadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostUpload400JSONResponse struct{ BadRequestJSONResponse }

func (response PostUpload400JSONResponse) VisitPostUploadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetDocumentIdDownloadRequestObject struct {
	DocumentId DocumentId `json:"document_id"`
}

type GetDocumentIdDownloadResponseObject interface {
	VisitGetDocumentIdDownloadResponse(w http.ResponseWriter) error
}

type GetDocumentIdDownload200ResponseHeaders struct {
	ContentDisposition string
}

type GetDocumentIdDownload200ApplicationoctetStreamResponse struct {
	Body          io.Reader
	Headers       GetDocumentIdDownload200ResponseHeaders
	ContentLength int64
}

func (response GetDocumentIdDownload200ApplicationoctetStreamResponse) VisitGetDocumentIdDownloadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/octet-stream")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("Content-Disposition", fmt.Sprint(response.Headers.ContentDisposition))
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetDocumentIdDownload404JSONResponse struct{ DocumentNotFoundJSONResponse }

func (response GetDocumentIdDownload404JSONResponse) VisitGetDocumentIdDownloadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (POST /attribute)
	PostAttribute(ctx context.Context, request PostAttributeRequestObject) (PostAttributeResponseObject, error)

	// (POST /search)
	PostSearch(ctx context.Context, request PostSearchRequestObject) (PostSearchResponseObject, error)

	// (POST /upload)
	PostUpload(ctx context.Context, request PostUploadRequestObject) (PostUploadResponseObject, error)
	// Download document
	// (GET /{document_id}/download)
	GetDocumentIdDownload(ctx context.Context, request GetDocumentIdDownloadRequestObject) (GetDocumentIdDownloadResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// PostAttribute operation middleware
func (sh *strictHandler) PostAttribute(w http.ResponseWriter, r *http.Request) {
	var request PostAttributeRequestObject

	var body PostAttributeJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostAttribute(ctx, request.(PostAttributeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAttribute")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostAttributeResponseObject); ok {
		if err := validResponse.VisitPostAttributeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSearch operation middleware
func (sh *strictHandler) PostSearch(w http.ResponseWriter, r *http.Request) {
	var request PostSearchRequestObject

	var body PostSearchJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostSearch(ctx, request.(PostSearchRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSearch")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostSearchResponseObject); ok {
		if err := validResponse.VisitPostSearchResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostUpload operation middleware
func (sh *strictHandler) PostUpload(w http.ResponseWriter, r *http.Request) {
	var request PostUploadRequestObject

	if reader, err := r.MultipartReader(); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode multipart body: %w", err))
		return
	} else {
		request.Body = reader
	}

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostUpload(ctx, request.(PostUploadRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUpload")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostUploadResponseObject); ok {
		if err := validResponse.VisitPostUploadResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDocumentIdDownload operation middleware
func (sh *strictHandler) GetDocumentIdDownload(w http.ResponseWriter, r *http.Request, documentId DocumentId) {
	var request GetDocumentIdDownloadRequestObject

	request.DocumentId = documentId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDocumentIdDownload(ctx, request.(GetDocumentIdDownloadRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDocumentIdDownload")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDocumentIdDownloadResponseObject); ok {
		if err := validResponse.VisitGetDocumentIdDownloadResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xX32/bNhD+V4TbHhnL27oXD3tIl23Iy1DUyFMbDGfxbLOQSJY8pTUC/e8DKdOSbCn1",
	"Ejdv+nG8O37ffXfkIxSmskaTZg+LR7DosCImF99uTFFXpPlWhjelYQEWeQsCNFYEC5B7g3+VBAGOPtfK",
	"kYQFu5oE+GJLFYalvLPB3LNTegNN0wRjb432FANdMzu1qpnek69LDp8Ko5l0fERrS1UgK6PzT97o8K3z",
	"bZ2x5Fi1nhRTNXz40dEaFvBD3u00b1f7/BAXGpGSROdwB033waw+UcEh60bAW5Tv6XNN/iVJknPGjeEy",
	"HjPR8I/hv0yt5etFXhK6YvtiUlKZnE9M2vKyrip0u7PpWZJ7IPdn2uXroHRnS4NyWRcFeX8BmG5vzo3d",
	"JJENVXTqusQVlSNeBTxgWdN4vE7PH/YOkvn9STKir+GDPoZJYD+/p8N1pmOhjqvjJNLGmdq2MB7K7WTn",
	"w4ISoOSoWYme76xEpvh/bVyFHHofMl2xqgjE6aK2P454s+imGBbwQM6rtkb2/5Rm2pAbo79T5wTczwLh",
	"UolPl23Sy2TeSQbxmXzhlOXo/MB7xiaroxMQHSErpUMxjLDxLCRewFS/kg+7uR8RsACl1yZ6UVxSf4tL",
	"VakSneJddv3uFnohYT6bz34KWRhLGq2CBfwym8/mIOJ4jtvLB2KzpgU6wBx7UZjo8M547npGmzZ5fmvk",
	"7n91sbMmbKK7GQIUTgrHp4Gf5/Mptwe7/PjI0Ah4c8663gBvBPx6zpL+UGmbbu6j9J6GtpXnd8J1qP1L",
	"gTqY96+L6F7PTyJ6lzQ/jWhVl6wsOs5DX7iSyHg+qMPGdClQh8eD56DaIvTYO203uTRfdEJsQyPN8ros",
	"zRefJTulNxnqfdskmSVn2WqXKfaZkqRZrRW5GYgj7P8m7q4CNymwGNwWPoxvqDPJe7eJ5n4cyAlpmIKJ",
	"rzw7wmrI5jebf0BuYogkZEhmviVnXZdl8LEllPsr0B9tRlc3ylvjFatjkdJXrGxs3ciMxTa4/i1bq5LC",
	"KP39YzKYSVN8/QhjGcaSePPtkji5B8TzXzoDQSLmQG30/V8AAAD//9AYpmniDQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
