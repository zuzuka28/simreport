// Code generated by protoc-gen-natsmicro. DO NOT EDIT.

package document

import (
	"context"
	"fmt"
	"time"

	"github.com/nats-io/nats.go"
	"github.com/nats-io/nats.go/micro"
	"google.golang.org/protobuf/proto"
)

type Handler func(ctx context.Context, req micro.Request)

type Middleware func(Handler) Handler

// DocumentServiceServer is the server API for DocumentService service.
type DocumentServiceServer interface {
	FetchDocument(context.Context, *FetchDocumentRequest) (*FetchDocumentResponse, error)
	UploadDocument(context.Context, *UploadRequest) (*UploadDocumentResponse, error)
	SearchAttribute(context.Context, *SearchAttributeRequest) (*SearchAttributeResponse, error)
	SearchDocument(context.Context, *SearchRequest) (*SearchDocumentResponse, error)
	SearchSimilarDocuments(context.Context, *DocumentId) (*SearchSimilarDocumentsResponse, error)
	SearchSimilaritySearchHistory(context.Context, *SearchSimilaritySearchHistoryRequest) (*SearchSimilaritySearchHistoryResponse, error)
}

type DocumentServiceServerConfig struct {
	micro.Config
	RequestTimeout time.Duration
	Middleware     Middleware
	OnError        func(ctx context.Context, err error)
}

type DocumentServiceNatsServer struct {
	srv  micro.Service
	impl DocumentServiceServer
	cfg  DocumentServiceServerConfig
}

// NewDocumentServiceNatsServer  creates a new NATS microservice server.
func NewDocumentServiceNatsServer(
	cfg DocumentServiceServerConfig,
	nc *nats.Conn,
	impl DocumentServiceServer,
) (*DocumentServiceNatsServer, error) {
	srv, err := micro.AddService(nc, cfg.Config)
	if err != nil {
		return nil, fmt.Errorf("failed to create microservice: %w", err)
	}

	if cfg.RequestTimeout == 0 {
		cfg.RequestTimeout = time.Second * 60
	}

	s := &DocumentServiceNatsServer{
		srv:  srv,
		impl: impl,
		cfg:  cfg,
	}

	group := srv.AddGroup(cfg.Name)

	// Register handlers
	if err := group.AddEndpoint("fetch_document", s.toMicroHandler(s.handleFetchDocument)); err != nil {
		return nil, fmt.Errorf("failed to add endpoint FetchDocument: %w", err)
	}
	if err := group.AddEndpoint("upload_document", s.toMicroHandler(s.handleUploadDocument)); err != nil {
		return nil, fmt.Errorf("failed to add endpoint UploadDocument: %w", err)
	}
	if err := group.AddEndpoint("search_attribute", s.toMicroHandler(s.handleSearchAttribute)); err != nil {
		return nil, fmt.Errorf("failed to add endpoint SearchAttribute: %w", err)
	}
	if err := group.AddEndpoint("search_document", s.toMicroHandler(s.handleSearchDocument)); err != nil {
		return nil, fmt.Errorf("failed to add endpoint SearchDocument: %w", err)
	}
	if err := group.AddEndpoint("search_similar_documents", s.toMicroHandler(s.handleSearchSimilarDocuments)); err != nil {
		return nil, fmt.Errorf("failed to add endpoint SearchSimilarDocuments: %w", err)
	}
	if err := group.AddEndpoint("search_similarity_search_history", s.toMicroHandler(s.handleSearchSimilaritySearchHistory)); err != nil {
		return nil, fmt.Errorf("failed to add endpoint SearchSimilaritySearchHistory: %w", err)
	}

	return s, nil
}

// Stop stops the microservice.
func (s *DocumentServiceNatsServer) Stop() error {
	return s.srv.Stop()
}

func (s *DocumentServiceNatsServer) toMicroHandler(h Handler) micro.HandlerFunc {
	return func(req micro.Request) {
		ctx, cancel := context.WithTimeout(context.Background(), s.cfg.RequestTimeout)
		defer cancel()

		if s.cfg.Middleware != nil {
			h = s.cfg.Middleware(h)
		}

		h(ctx, req)
	}
}

func (s *DocumentServiceNatsServer) handleFetchDocument(
	ctx context.Context,
	req micro.Request,
) {
	msg := new(FetchDocumentRequest)

	if err := proto.Unmarshal(req.Data(), msg); err != nil {
		req.Error("500", "unproccessable request", nil, nil)
		return
	}

	res, err := s.impl.FetchDocument(ctx, msg)
	if err != nil {
		req.Error("500", "server error", nil, nil)
		return
	}

	resp, err := proto.Marshal(res)
	if err != nil {
		if s.cfg.OnError != nil {
			s.cfg.OnError(ctx, err)
		}

		req.Error("500", "server error", nil, nil)
		return
	}

	req.Respond(resp)
}

func (s *DocumentServiceNatsServer) handleUploadDocument(
	ctx context.Context,
	req micro.Request,
) {
	msg := new(UploadRequest)

	if err := proto.Unmarshal(req.Data(), msg); err != nil {
		req.Error("500", "unproccessable request", nil, nil)
		return
	}

	res, err := s.impl.UploadDocument(ctx, msg)
	if err != nil {
		req.Error("500", "server error", nil, nil)
		return
	}

	resp, err := proto.Marshal(res)
	if err != nil {
		if s.cfg.OnError != nil {
			s.cfg.OnError(ctx, err)
		}

		req.Error("500", "server error", nil, nil)
		return
	}

	req.Respond(resp)
}

func (s *DocumentServiceNatsServer) handleSearchAttribute(
	ctx context.Context,
	req micro.Request,
) {
	msg := new(SearchAttributeRequest)

	if err := proto.Unmarshal(req.Data(), msg); err != nil {
		req.Error("500", "unproccessable request", nil, nil)
		return
	}

	res, err := s.impl.SearchAttribute(ctx, msg)
	if err != nil {
		req.Error("500", "server error", nil, nil)
		return
	}

	resp, err := proto.Marshal(res)
	if err != nil {
		if s.cfg.OnError != nil {
			s.cfg.OnError(ctx, err)
		}

		req.Error("500", "server error", nil, nil)
		return
	}

	req.Respond(resp)
}

func (s *DocumentServiceNatsServer) handleSearchDocument(
	ctx context.Context,
	req micro.Request,
) {
	msg := new(SearchRequest)

	if err := proto.Unmarshal(req.Data(), msg); err != nil {
		req.Error("500", "unproccessable request", nil, nil)
		return
	}

	res, err := s.impl.SearchDocument(ctx, msg)
	if err != nil {
		req.Error("500", "server error", nil, nil)
		return
	}

	resp, err := proto.Marshal(res)
	if err != nil {
		if s.cfg.OnError != nil {
			s.cfg.OnError(ctx, err)
		}

		req.Error("500", "server error", nil, nil)
		return
	}

	req.Respond(resp)
}

func (s *DocumentServiceNatsServer) handleSearchSimilarDocuments(
	ctx context.Context,
	req micro.Request,
) {
	msg := new(DocumentId)

	if err := proto.Unmarshal(req.Data(), msg); err != nil {
		req.Error("500", "unproccessable request", nil, nil)
		return
	}

	res, err := s.impl.SearchSimilarDocuments(ctx, msg)
	if err != nil {
		req.Error("500", "server error", nil, nil)
		return
	}

	resp, err := proto.Marshal(res)
	if err != nil {
		if s.cfg.OnError != nil {
			s.cfg.OnError(ctx, err)
		}

		req.Error("500", "server error", nil, nil)
		return
	}

	req.Respond(resp)
}

func (s *DocumentServiceNatsServer) handleSearchSimilaritySearchHistory(
	ctx context.Context,
	req micro.Request,
) {
	msg := new(SearchSimilaritySearchHistoryRequest)

	if err := proto.Unmarshal(req.Data(), msg); err != nil {
		req.Error("500", "unproccessable request", nil, nil)
		return
	}

	res, err := s.impl.SearchSimilaritySearchHistory(ctx, msg)
	if err != nil {
		req.Error("500", "server error", nil, nil)
		return
	}

	resp, err := proto.Marshal(res)
	if err != nil {
		if s.cfg.OnError != nil {
			s.cfg.OnError(ctx, err)
		}

		req.Error("500", "server error", nil, nil)
		return
	}

	req.Respond(resp)
}

// DocumentServiceClient is the client API for DocumentService service.
type DocumentServiceClient struct {
	nc *nats.Conn
}

// NewDocumentServiceClient creates a new NATS microservice client.
func NewDocumentServiceClient(nc *nats.Conn) *DocumentServiceClient {
	return &DocumentServiceClient{nc: nc}
}

func (c *DocumentServiceClient) FetchDocument(
	ctx context.Context,
	req *FetchDocumentRequest,
) (*FetchDocumentResponse, error) {
	resp := new(FetchDocumentResponse)

	data, err := proto.Marshal(req)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal request: %w", err)
	}

	msg, err := c.nc.RequestWithContext(ctx, "documentservice.fetch_document", data)
	if err != nil {
		return nil, fmt.Errorf("failed to send request: %w", err)
	}

	if err := proto.Unmarshal(msg.Data, resp); err != nil {
		return nil, fmt.Errorf("failed to unmarshal response: %w", err)
	}

	return resp, nil
}

func (c *DocumentServiceClient) UploadDocument(
	ctx context.Context,
	req *UploadRequest,
) (*UploadDocumentResponse, error) {
	resp := new(UploadDocumentResponse)

	data, err := proto.Marshal(req)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal request: %w", err)
	}

	msg, err := c.nc.RequestWithContext(ctx, "documentservice.upload_document", data)
	if err != nil {
		return nil, fmt.Errorf("failed to send request: %w", err)
	}

	if err := proto.Unmarshal(msg.Data, resp); err != nil {
		return nil, fmt.Errorf("failed to unmarshal response: %w", err)
	}

	return resp, nil
}

func (c *DocumentServiceClient) SearchAttribute(
	ctx context.Context,
	req *SearchAttributeRequest,
) (*SearchAttributeResponse, error) {
	resp := new(SearchAttributeResponse)

	data, err := proto.Marshal(req)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal request: %w", err)
	}

	msg, err := c.nc.RequestWithContext(ctx, "documentservice.search_attribute", data)
	if err != nil {
		return nil, fmt.Errorf("failed to send request: %w", err)
	}

	if err := proto.Unmarshal(msg.Data, resp); err != nil {
		return nil, fmt.Errorf("failed to unmarshal response: %w", err)
	}

	return resp, nil
}

func (c *DocumentServiceClient) SearchDocument(
	ctx context.Context,
	req *SearchRequest,
) (*SearchDocumentResponse, error) {
	resp := new(SearchDocumentResponse)

	data, err := proto.Marshal(req)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal request: %w", err)
	}

	msg, err := c.nc.RequestWithContext(ctx, "documentservice.search_document", data)
	if err != nil {
		return nil, fmt.Errorf("failed to send request: %w", err)
	}

	if err := proto.Unmarshal(msg.Data, resp); err != nil {
		return nil, fmt.Errorf("failed to unmarshal response: %w", err)
	}

	return resp, nil
}

func (c *DocumentServiceClient) SearchSimilarDocuments(
	ctx context.Context,
	req *DocumentId,
) (*SearchSimilarDocumentsResponse, error) {
	resp := new(SearchSimilarDocumentsResponse)

	data, err := proto.Marshal(req)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal request: %w", err)
	}

	msg, err := c.nc.RequestWithContext(ctx, "documentservice.search_similar_documents", data)
	if err != nil {
		return nil, fmt.Errorf("failed to send request: %w", err)
	}

	if err := proto.Unmarshal(msg.Data, resp); err != nil {
		return nil, fmt.Errorf("failed to unmarshal response: %w", err)
	}

	return resp, nil
}

func (c *DocumentServiceClient) SearchSimilaritySearchHistory(
	ctx context.Context,
	req *SearchSimilaritySearchHistoryRequest,
) (*SearchSimilaritySearchHistoryResponse, error) {
	resp := new(SearchSimilaritySearchHistoryResponse)

	data, err := proto.Marshal(req)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal request: %w", err)
	}

	msg, err := c.nc.RequestWithContext(ctx, "documentservice.search_similarity_search_history", data)
	if err != nil {
		return nil, fmt.Errorf("failed to send request: %w", err)
	}

	if err := proto.Unmarshal(msg.Data, resp); err != nil {
		return nil, fmt.Errorf("failed to unmarshal response: %w", err)
	}

	return resp, nil
}
